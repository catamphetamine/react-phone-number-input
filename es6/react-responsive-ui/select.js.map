{"version":3,"sources":["../../source/react-responsive-ui/select.js"],"names":["React","PureComponent","PropTypes","ReactDOM","classNames","submit_parent_form","get_scrollbar_width","Empty_value_option_value","value_prop_type","oneOfType","string","number","bool","Select","props","options","timeouts","value","autocomplete","children","menu","toggler","onChange","Error","state","matching_options","get_matching_options","Children","forEach","element","label","fallback","nativeExpanded","document","addEventListener","document_clicked","setState","javascript","resize_native_expanded_select","window","previous_props","previous_state","expanded","height","should_animate","undefined","calculate_height","removeEventListener","timeoutID","clearTimeout","id","upward","scroll","alignment","saveOnIcons","native","disabled","required","placeholder","error","style","className","list_height","get_options","list_style","is_scrollable","maxHeight","overflow","overflown","list_items","map","index","icon","render_list_item","wrapper_style","textAlign","selected","get_selected_option","markup","select","ref","on_key_down_in_container","rrui__rich","rrui__input","render_selected_item","value_is_empty","should_indicate_invalid","menu_toggler","cloneElement","onClick","toggle","length","list","render_static","scrollbarPadding","focused_option_value","is_focused","item_style","marginRight","button","extra_props","item_clicked","event","get_option_key","type","Separator","render_selected_item_only","native_expanded_select_container_style","concise","tabIndex","onFocus","inputClassName","autocomplete_width","autocomplete_input_value","selected_label","get_selected_option_label","selected_text","on_autocomplete_input_change","on_key_down","on_blur","title","name","rrui__rich__fallback","native_select_on_change","render_native_select_options","child","empty_option_is_selected","empty_option_present","rendered_options","option","unshift","indicateInvalid","get_option","filter","x","indexOf","option_index","maxItems","vertical_padding","focus","preventDefault","callback","autocompleteShowAll","slice","i","option_element","findDOMNode","offset_top","offsetTop","is_first_option","firstChild","scrollTop","gravity","is_last_option","lastChild","top_line","bottom_line","offsetHeight","list_dom_node","border","parseInt","getComputedStyle","borderTopWidth","scrollHeight","paddingTop","scrollable_list_height","toLowerCase","verbose","propTypes","arrayOf","shape","node","isRequired","func","onBlur","object","oneOf","focusUponSelection","onTabOut","onToggle","automaticallyScrollIntoView","defaultProps","target","width","offsetWidth","toggle_options","expander","focusOnSelect","scrollIntoView","setTimeout","scroll_to","dont_focus_after_toggle","scrollIntoViewIfNeeded","selected_option","options_list","contains","ctrlKey","altKey","shiftKey","metaKey","keyCode","previous","previous_focusable_option","show_option","next","next_focusable_option","focusOnCollapse","_event","stopPropagation","input","display"],"mappings":";;;;;;;;AAAA;;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,YAAxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,2BAA2B,EAAjC;;AAEA,IAAMC,kBAAkBN,UAAUO,SAAV,CAAoB,CAC1CP,UAAUQ,MADgC,EAE1CR,UAAUS,MAFgC,EAG1CT,UAAUU,IAHgC,CAApB,CAAxB;;IAMqBC,M;;;AAyJnB,kBAAYC,KAAZ,EAAmB;AAAA;;AAGjB;AACA;AAJiB,iHACXA,KADW;;AAAA;;AAKjB,UAAKC,OAAL,GAAe,EAAf;AACA;AACA,UAAKC,QAAL,GAAgB,EAAhB;AAPiB,QASfC,KATe,GAgBbH,KAhBa,CASfG,KATe;AAAA,QAUfC,YAVe,GAgBbJ,KAhBa,CAUfI,YAVe;AAAA,QAWfH,OAXe,GAgBbD,KAhBa,CAWfC,OAXe;AAAA,QAYfI,QAZe,GAgBbL,KAhBa,CAYfK,QAZe;AAAA,QAafC,IAbe,GAgBbN,KAhBa,CAafM,IAbe;AAAA,QAcfC,OAde,GAgBbP,KAhBa,CAcfO,OAde;AAAA,QAefC,QAfe,GAgBbR,KAhBa,CAefQ,QAfe;;;AAkBjB,QAAIJ,YAAJ,EAAkB;AAChB,UAAI,CAACH,OAAL,EAAc;AACZ,cAAM,IAAIQ,KAAJ,+DAAN;AAGD;;AAED,YAAKC,KAAL,CAAWC,gBAAX,GAA8B,MAAKC,oBAAL,CAA0BX,OAA1B,EAAmCE,KAAnC,CAA9B;AACD;;AAED,QAAIE,YAAY,CAACC,IAAjB,EAAuB;AACrBpB,YAAM2B,QAAN,CAAeC,OAAf,CAAuBT,QAAvB,EAAiC,mBAAW;AAC1C,YAAI,CAACU,QAAQf,KAAR,CAAcG,KAAnB,EAA0B;AACxB,gBAAM,IAAIM,KAAJ,4DAAN;AAGD;;AAED,YAAI,CAACM,QAAQf,KAAR,CAAcgB,KAAnB,EAA0B;AACxB,gBAAM,IAAIP,KAAJ,4DAAN;AAGD;AACF,OAZD;AAaD;;AAED,QAAIH,QAAQ,CAACC,OAAb,EAAsB;AACpB,YAAM,IAAIE,KAAJ,kEAAN;AAGD;;AAED,QAAI,CAACH,IAAD,IAAS,CAACE,QAAd,EAAwB;AACtB,YAAM,IAAIC,KAAJ,uDAAN;AACD;AApDgB;AAqDlB;;AAED;;;;;wCACoB;AAAA,mBACmB,KAAKT,KADxB;AAAA,UACViB,QADU,UACVA,QADU;AAAA,UACAC,cADA,UACAA,cADA;;;AAGlBC,eAASC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,gBAAxC;;AAEA,UAAIJ,QAAJ,EAAc;AACZ,aAAKK,QAAL,CAAc,EAAEC,YAAY,IAAd,EAAd;AACD;;AAED,UAAIL,cAAJ,EAAoB;AAClB,aAAKM,6BAAL;AACAC,eAAOL,gBAAP,CAAwB,QAAxB,EAAkC,KAAKI,6BAAvC;AACD;AACF;;;uCAEkBE,c,EAAgBC,c,EAAgB;AAAA,oBACf,KAAK3B,KADU;AAAA,UACzCkB,cADyC,WACzCA,cADyC;AAAA,UACzBf,KADyB,WACzBA,KADyB;AAAA,mBAEpB,KAAKO,KAFe;AAAA,UAEzCkB,QAFyC,UAEzCA,QAFyC;AAAA,UAE/BC,MAF+B,UAE/BA,MAF+B;;;AAIjD,UAAID,aAAaD,eAAeC,QAAhC,EAA0C;AACxC,YAAIA,YAAY,KAAKE,cAAL,EAAhB,EAAuC;AACrC,cAAID,WAAWE,SAAf,EAA0B;AACxB,iBAAKC,gBAAL;AACD;AACF;AACF;;AAED;AACA,UAAId,kBAAkBf,UAAUuB,eAAevB,KAA/C,EAAsD;AACpD,aAAKqB,6BAAL;AACD;AACF;;;2CAEsB;AAAA,UACbN,cADa,GACM,KAAKlB,KADX,CACbkB,cADa;;;AAGrBC,eAASc,mBAAT,CAA6B,OAA7B,EAAsC,KAAKZ,gBAA3C;;AAEA,UAAIH,cAAJ,EAAoB;AAClBO,eAAOQ,mBAAP,CAA2B,QAA3B,EAAqC,KAAKT,6BAA1C;AACD;AAPoB;AAAA;AAAA;;AAAA;AAQrB,0CAAwB,aAAY,KAAKtB,QAAjB,CAAxB,4GAAoD;AAAA,cAAzCgC,SAAyC;;AAClDC,uBAAa,KAAKjC,QAAL,CAAcgC,SAAd,CAAb;AACD;AAVoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtB;;;6BAEQ;AAAA;;AAAA,oBAsBH,KAAKlC,KAtBF;AAAA,UAELoC,EAFK,WAELA,EAFK;AAAA,UAGLC,MAHK,WAGLA,MAHK;AAAA,UAILC,MAJK,WAILA,MAJK;AAAA,UAKLjC,QALK,WAKLA,QALK;AAAA,UAMLC,IANK,WAMLA,IANK;AAAA,UAOLC,OAPK,WAOLA,OAPK;AAAA,UAQLgC,SARK,WAQLA,SARK;AAAA,UASLnC,YATK,WASLA,YATK;AAAA,UAULoC,WAVK,WAULA,WAVK;AAAA,UAWLvB,QAXK,WAWLA,QAXK;AAAA,UAYLwB,MAZK,WAYLA,MAZK;AAAA,UAaLvB,cAbK,WAaLA,cAbK;AAAA,UAcLwB,QAdK,WAcLA,QAdK;AAAA,UAeLC,QAfK,WAeLA,QAfK;AAAA,UAgBLC,WAhBK,WAgBLA,WAhBK;AAAA,UAiBL5B,KAjBK,WAiBLA,KAjBK;AAAA,UAkBLb,KAlBK,WAkBLA,KAlBK;AAAA,UAmBL0C,KAnBK,WAmBLA,KAnBK;AAAA,UAoBLC,KApBK,WAoBLA,KApBK;AAAA,UAqBLC,SArBK,WAqBLA,SArBK;AAAA,oBAwB2B,KAAKrC,KAxBhC;AAAA,UAwBCkB,QAxBD,WAwBCA,QAxBD;AAAA,UAwBWoB,WAxBX,WAwBWA,WAxBX;;;AA0BP,UAAM/C,UAAU,KAAKgD,WAAL,EAAhB;;AAEA,UAAIC,mBAAJ;;AAEA;AACA,UAAI,KAAKC,aAAL,MAAwB,KAAKzC,KAAL,CAAWsC,WAAX,KAA2BjB,SAAvD,EAAkE;AAChEmB,qBAAa,EAAEE,WAAcJ,WAAd,OAAF,EAAb;AACD;;AAED,UAAMK,WAAWf,UAAUrC,OAAV,IAAqB,KAAKqD,SAAL,EAAtC;;AAEA,UAAIC,mBAAJ;;AAEA;AACA;AACA,UAAItD,OAAJ,EAAa;AACXsD,qBAAatD,QAAQuD,GAAR,CAAY,gBAAyBC,KAAzB,EAAmC;AAAA,cAAhCtD,KAAgC,QAAhCA,KAAgC;AAAA,cAAzBa,KAAyB,QAAzBA,KAAyB;AAAA,cAAlB0C,IAAkB,QAAlBA,IAAkB;;AAC1D,iBAAO,OAAKC,gBAAL,CAAsB;AAC3BF,wBAD2B;AAE3BtD,wBAF2B;AAG3Ba,wBAH2B;AAI3B0C,kBAAM,CAAClB,WAAD,IAAgBkB,IAJK;AAK3BL;AAL2B,WAAtB,CAAP;AAOD,SARY,CAAb;AASD,OAVD,MAUO;AACL;AACA;AACAE,qBAAarE,MAAM2B,QAAN,CAAe2C,GAAf,CAAmBnD,QAAnB,EAA6B,UAACU,OAAD,EAAU0C,KAAV,EAAoB;AAC5D,cAAI,CAAC1C,OAAL,EAAc;AACZ;AACD;;AAED,iBAAO,OAAK4C,gBAAL,CAAsB,EAAEF,YAAF,EAAS1C,gBAAT,EAAtB,CAAP;AACD,SANY,CAAb;AAOD;;AAED,UAAM6C,gBAAgB,EAAEC,WAAWtB,SAAb,EAAtB;;AAEA,UAAMuB,WAAW,KAAKC,mBAAL,EAAjB;;AAEA,UAAMC,SACJ;AAAA;AAAA;AACE,eAAK;AAAA,mBAAQ,OAAKC,MAAL,GAAcC,KAAtB;AAAA,WADP;AAEE,qBAAW,KAAKC,wBAFlB;AAGE,iBAAOrB,qBAAac,aAAb,EAA+Bd,KAA/B,IAAyCc,aAHlD;AAIE,qBAAWtE,WACT,cADS,EAET;AACE8E,wBAAYnD,QADd;AAEE,kCAAsBX,IAFxB;AAGE,oCAAwB+B,MAH1B;AAIE,sCAA0BT,QAJ5B;AAKE,uCAA2B,CAACA,QAL9B;AAME,sCAA0Bc;AAN5B,WAFS,EAUTK,SAVS;AAJb;AAiBE;AAAA;AAAA;AACE,uBAAWzD,WAAW;AACpB+E,2BAAa,CAAC/D;AADM,aAAX;AADb;AAMG,WAACA,IAAD,IAAS,CAACmC,MAAV,IAAoB,KAAK6B,oBAAL,EANvB;AAeGtD,oBACE,KAAK+C,mBAAL,MAA8BnB,WADhC,KAEC;AAAA;AAAA;AACE,uBAASR,EADX;AAEE,yBAAW9C,WAAW,mBAAX,EAAgC;AACzC,+CACEqD,YAAY4B,eAAepE,KAAf,CAF2B;AAGzC,8CAA8B,KAAKqE,uBAAL;AAHW,eAAhC;AAFb;AAQGxD;AARH,WAjBJ;AA6BGV,kBACC;AAAA;AAAA;AACE,mBAAK;AAAA,uBAAO,OAAKmE,YAAZ;AAAA,eADP;AAEE,yBAAU;AAFZ;AAIGvF,kBAAMwF,YAAN,CAAmBnE,OAAnB,EAA4B,EAAEoE,SAAS,KAAKC,MAAhB,EAA5B;AAJH,WA9BJ;AAuCG,WAACnC,MAAD,IACC,CAACvB,cADF,IAECqC,WAAWsB,MAAX,GAAoB,CAFrB,IAGC;AAAA;AAAA;AACE,mBAAK;AAAA,uBAAQ,OAAKC,IAAL,GAAYZ,KAApB;AAAA,eADP;AAEE,qBAAOhB,UAFT;AAGE,yBAAW5D,WACT,kBADS,EAET,2BAFS,EAGT,uBAHS,EAIT,cAJS,EAKT;AACE,+CAA+BgB,IADjC;AAEE,8CAA8BsB,QAFhC;AAGE,mDAAmCA,QAHrC;AAIE,kDAAkCW,cAAc,MAJlD;AAKE,mDAAmCA,cAAc,OALnD;AAME,uDACE,CAAClC,QAAD,IAAakC,cAAc,MAP/B;AAQE,wDACE,CAAClC,QAAD,IAAakC,cAAc,OAT/B;AAUE;AACA,iDAAiCF,MAXnC;AAYE,mDAAmC,CAACA;AAZtC,eALS;AAHb;AAwBGkB;AAxBH,WA1CJ;AAsEG,WAACd,UAAWxB,YAAY,CAAC,KAAKP,KAAL,CAAWa,UAApC,KACC,KAAKwD,aAAL;AAvEJ,SAjBF;AA4FG,aAAKP,uBAAL,MACC;AAAA;AAAA,YAAK,WAAU,mBAAf;AACG3B;AADH;AA7FJ,OADF;;AAoGA,aAAOmB,MAAP;AACD;;;4CAEkE;AAAA;;AAAA,UAAhDP,KAAgD,SAAhDA,KAAgD;AAAA,UAAzC1C,OAAyC,SAAzCA,OAAyC;AAAA,UAAhCZ,KAAgC,SAAhCA,KAAgC;AAAA,UAAzBa,KAAyB,SAAzBA,KAAyB;AAAA,UAAlB0C,IAAkB,SAAlBA,IAAkB;AAAA,UAAZL,QAAY,SAAZA,QAAY;AAAA,oBACpB,KAAKrD,KADe;AAAA,UACzD0C,QADyD,WACzDA,QADyD;AAAA,UAC/CpC,IAD+C,WAC/CA,IAD+C;AAAA,UACzC0E,gBADyC,WACzCA,gBADyC;AAAA,oBAEtB,KAAKtE,KAFiB;AAAA,UAEzDuE,oBAFyD,WAEzDA,oBAFyD;AAAA,UAEnCrD,QAFmC,WAEnCA,QAFmC;;AAIjE;AACA;;AACA,UAAIb,OAAJ,EAAa;AACXZ,gBAAQY,QAAQf,KAAR,CAAcG,KAAtB;AACD;;AAED,UAAM+E,aAAa,CAAC5E,IAAD,IAASH,UAAU8E,oBAAtC;;AAEA,UAAIE,mBAAJ;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAI9B,YAAY2B,gBAAhB,EAAkC;AAChCG,qBAAa,EAAEC,aAAa5F,wBAAwB,IAAvC,EAAb;AACD;;AAED,UAAI6F,eAAJ;;AAEA;AACA;AACA,UAAItE,OAAJ,EAAa;AACX,YAAMuE,cAAc;AAClBxC,iBAAOqC,0BACEA,UADF,EACiBpE,QAAQf,KAAR,CAAc8C,KAD/B,IAEH/B,QAAQf,KAAR,CAAc8C,KAHA;AAIlBC,qBAAWzD,WACT,sBADS,EAET;AACE,6CAAiC4F;AADnC,WAFS,EAKTnE,QAAQf,KAAR,CAAc+C,SALL;AAJO,SAApB;;AAaA,YAAM4B,UAAU5D,QAAQf,KAAR,CAAc2E,OAA9B;;AAEAW,oBAAYX,OAAZ,GAAsB,iBAAS;AAC7B,cAAIrE,IAAJ,EAAU;AACR,mBAAKsE,MAAL;AACD,WAFD,MAEO;AACL,mBAAKW,YAAL,CAAkBpF,KAAlB,EAAyBqF,KAAzB;AACD;;AAED,cAAIb,OAAJ,EAAa;AACXA,oBAAQa,KAAR;AACD;AACF,SAVD;;AAYAH,iBAASnG,MAAMwF,YAAN,CAAmB3D,OAAnB,EAA4BuE,WAA5B,CAAT;AACD,OA7BD,MA6BO;AACL;AACA;AACAD,iBACE;AAAA;AAAA;AACE,kBAAK,QADP;AAEE,qBAAS;AAAA,qBAAS,OAAKE,YAAL,CAAkBpF,KAAlB,EAAyBqF,KAAzB,CAAT;AAAA,aAFX;AAGE,sBAAU9C,QAHZ;AAIE,sBAAS,IAJX;AAKE,uBAAWpD,WAAW,sBAAX,EAAmC;AAC5C,+CAAiC4F,UADW;AAE5C;AACA,gDAAkCxC;AAHU,aAAnC,CALb;AAUE,mBAAOyC;AAVT;AAYGzB,kBACCxE,MAAMwF,YAAN,CAAmBhB,IAAnB,EAAyB;AACvBX,uBAAWzD,WACToE,KAAK1D,KAAL,CAAW+C,SADF,EAET,2BAFS;AADY,WAAzB,CAbJ;AAmBG/B;AAnBH,SADF;AAuBD;;AAED,UAAMgD,SACJ;AAAA;AAAA;AACE,eAAKyB,eAAetF,KAAf,CADP;AAEE,eAAK;AAAA,mBAAQ,OAAKF,OAAL,CAAawF,eAAetF,KAAf,CAAb,IAAsC+D,KAA9C;AAAA,WAFP;AAGE,qBAAW5E,WACT,2BADS,EAET,iCAFS,EAGT;AACE,8CACEyB,WAAWA,QAAQ2E,IAAR,KAAiB3F,OAAO4F,SAFvC;AAGE,mDAAuC/D,QAHzC;AAIE;AACA,yDAA6CA;AAL/C,WAHS;AAHb;AAeGyD;AAfH,OADF;;AAoBA,aAAOrB,MAAP;AACD,K,CAAC;;AAEF;AACA;AACA;AACA;AACA;;;;2CACuB;AAAA,UACb9C,cADa,GACM,KAAKlB,KADX,CACbkB,cADa;;;AAGrB,UAAM4C,WAAW,KAAK8B,yBAAL,EAAjB;;AAEA,UAAI,CAAC1E,cAAL,EAAqB;AACnB,eAAO4C,QAAP;AACD;;AAED,UAAME,SACJ;AAAA;AAAA,UAAK,OAAO6B,sCAAZ;AACG,aAAKd,aAAL,EADH;AAEGjB;AAFH,OADF;;AAOA,aAAOE,MAAP;AACD;;;gDAE2B;AAAA;;AAAA,oBAYtB,KAAKhE,KAZiB;AAAA,UAExBK,QAFwB,WAExBA,QAFwB;AAAA,UAGxBF,KAHwB,WAGxBA,KAHwB;AAAA,UAIxByC,WAJwB,WAIxBA,WAJwB;AAAA,UAKxB5B,KALwB,WAKxBA,KALwB;AAAA,UAMxB0B,QANwB,WAMxBA,QANwB;AAAA,UAOxBtC,YAPwB,WAOxBA,YAPwB;AAAA,UAQxB0F,OARwB,WAQxBA,OARwB;AAAA,UASxBC,QATwB,WASxBA,QATwB;AAAA,UAUxBC,OAVwB,WAUxBA,OAVwB;AAAA,UAWxBC,cAXwB,WAWxBA,cAXwB;AAAA,oBAkBtB,KAAKvF,KAlBiB;AAAA,UAexBkB,QAfwB,WAexBA,QAfwB;AAAA,UAgBxBsE,kBAhBwB,WAgBxBA,kBAhBwB;AAAA,UAiBxBC,wBAjBwB,WAiBxBA,wBAjBwB;;;AAoB1B,UAAMrC,WAAW,KAAKC,mBAAL,EAAjB;AACA,UAAMqC,iBAAiB,KAAKC,yBAAL,EAAvB;;AAEA,UAAMC,gBAAgBxC,WAAWsC,cAAX,GAA4BxD,eAAe5B,KAAjE;;AAEA,UAAIZ,gBAAgBwB,QAApB,EAA8B;AAC5B;;AAEA,YAAMoC,UACJ;AACE,gBAAK,MADP;AAEE,eAAK;AAAA,mBAAQ,OAAK5D,YAAL,GAAoB8D,KAA5B;AAAA,WAFP;AAGE,uBAAaoC,aAHf;AAIE,iBAAOH,wBAJT;AAKE,oBAAU,KAAKI,4BALjB;AAME,qBAAW,KAAKC,WANlB;AAOE,mBAASR,OAPX;AAQE,kBAAQ,KAAKS,OARf;AASE,oBAAUV,QATZ;AAUE,qBAAWzG,WACT,mBADS,EAET,wBAFS,EAGT,sCAHS,EAIT;AACE,+CAAmC,CAAC8G,cADtC;AAEE;AACA,gDAAoCxE,QAHtC;AAIE,gDAAoCc;AAJtC,WAJS,EAUTuD,cAVS;AAVb,UADF;;AA0BA,eAAOjC,OAAP;AACD;;AAED,UAAMA,SACJ;AAAA;AAAA;AACE,eAAK;AAAA,mBAAQ,OAAKF,QAAL,GAAgBI,KAAxB;AAAA,WADP;AAEE,gBAAK,QAFP;AAGE,oBAAUxB,QAHZ;AAIE,mBAAS,KAAKkC,MAJhB;AAKE,qBAAW,KAAK4B,WALlB;AAME,mBAASR,OANX;AAOE,kBAAQ,KAAKS,OAPf;AAQE,oBAAUV,QARZ;AASE,qBAAWzG,WAAW,mBAAX,EAAgC,wBAAhC,EAA0D;AACnE,0CAA8B,KAAKkF,uBAAL,EADqC;AAEnE,+CAAmC,CAAC4B;AAF+B,WAA1D;AATb;AAeE;AAAA;AAAA,YAAK,WAAU,gCAAf;AAEE;AAAA;AAAA,cAAK,WAAU,8BAAf;AACGN,uBAAWhC,QAAX,IAAuBA,SAASJ,IAAhC,GACGxE,MAAMwF,YAAN,CAAmBZ,SAASJ,IAA5B,EAAkC,EAAEgD,OAAON,cAAT,EAAlC,CADH,GAEGE;AAHN,WAFF;AASE;AACE,uBAAWhH,WAAW,qBAAX,EAAkC;AAC3C;AACA,+CAAiCsC;AAFU,aAAlC;AADb;AATF;AAfF,OADF;;AAmCA,aAAOoC,MAAP;AACD;;AAED;;;;oCACgB;AAAA;;AAAA,oBAaV,KAAKhE,KAbK;AAAA,UAEZoC,EAFY,WAEZA,EAFY;AAAA,UAGZuE,IAHY,WAGZA,IAHY;AAAA,UAIZxG,KAJY,WAIZA,KAJY;AAAA,UAKZa,KALY,WAKZA,KALY;AAAA,UAMZ0B,QANY,WAMZA,QANY;AAAA,UAOZzC,OAPY,WAOZA,OAPY;AAAA,UAQZK,IARY,WAQZA,IARY;AAAA,UASZC,OATY,WASZA,OATY;AAAA,UAUZU,QAVY,WAUZA,QAVY;AAAA,UAWZC,cAXY,WAWZA,cAXY;AAAA,UAYZb,QAZY,WAYZA,QAZY;;;AAed,UAAIC,IAAJ,EAAU;AACR,YAAM0D,WACJ;AAAA;AAAA;AACE,uBAAW1E,WAAW;AACpBsH,oCAAsB3F;AADF,aAAX;AADb;AAKGV;AALH,SADF;;AAUA,eAAOyD,QAAP;AACD;;AAED,UAAMA,SACJ;AAAA;AAAA;AACE,eAAK;AAAA,mBAAQ,OAAKvB,MAAL,GAAcyB,KAAtB;AAAA,WADP;AAEE,cAAI9B,EAFN;AAGE,gBAAMuE,IAHR;AAIE,iBAAOpC,eAAepE,KAAf,IAAwBV,wBAAxB,GAAmDU,KAJ5D;AAKE,oBAAUuC,QALZ;AAME,oBAAU,KAAKmE,uBANjB;AAOE,qBAAWvH,WAAW,aAAX,EAA0B,sBAA1B,EAAkD;AAC3D,6CAAiC4B,cAD0B;AAE3D0F,kCAAsB3F;AAFqC,WAAlD;AAPb;AAYGhB,kBACG,KAAK6G,4BAAL,CAAkC7G,OAAlC,EAA2CsE,eAAepE,KAAf,CAA3C,CADH,GAEGjB,MAAM2B,QAAN,CAAe2C,GAAf,CAAmBnD,QAAnB,EAA6B,iBAAS;AACpC,cAAI,CAAC0G,KAAL,EAAY;AACV;AACD;;AAED,cAAM/C,SACJ;AAAA;AAAA;AACE,yBAAU,6BADZ;AAEE,mBAAK+C,MAAM/G,KAAN,CAAYG,KAFnB;AAGE,qBAAO4G,MAAM/G,KAAN,CAAYG;AAHrB;AAKG4G,kBAAM/G,KAAN,CAAYgB;AALf,WADF;;AAUA,iBAAOgD,MAAP;AACD,SAhBD;AAdN,OADF;;AAmCA,aAAOA,MAAP;AACD;;;iDAE4B/D,O,EAAS+G,wB,EAA0B;AAAA,UACtDpE,WADsD,GACtC,KAAK5C,KADiC,CACtD4C,WADsD;;;AAG9D,UAAIqE,uBAAuB,KAA3B;;AAEA,UAAMC,mBAAmBjH,QAAQuD,GAAR,CAAY,kBAAU;AAAA,YACvCrD,KADuC,GACtBgH,MADsB,CACvChH,KADuC;AAAA,YAChCa,KADgC,GACtBmG,MADsB,CAChCnG,KADgC;;;AAG7C,YAAIuD,eAAepE,KAAf,CAAJ,EAA2B;AACzB8G,iCAAuB,IAAvB;AACA9G,kBAAQV,wBAAR;AACD;;AAED,YAAMuE,SACJ;AAAA;AAAA;AACE,uBAAU,6BADZ;AAEE,iBAAKyB,eAAetF,KAAf,CAFP;AAGE,mBAAOA;AAHT;AAKGa;AALH,SADF;;AAUA,eAAOgD,MAAP;AACD,OAnBwB,CAAzB;;AAqBA,UAAIgD,4BAA4B,CAACC,oBAAjC,EAAuD;AACrDC,yBAAiBE,OAAjB,CACE;AAAA;AAAA;AACE,uBAAU,6BADZ;AAEE,iBAAK3B,eAAe1D,SAAf,CAFP;AAGE,mBAAM;AAHR;AAKGa;AALH,SADF;AASD;;AAED,aAAOsE,gBAAP;AACD;;AAED;;;;8CAC0B;AAAA,oBACW,KAAKlH,KADhB;AAAA,UAChBqH,eADgB,WAChBA,eADgB;AAAA,UACCxE,KADD,WACCA,KADD;;;AAGxB,aAAOwE,mBAAmBxE,KAA1B;AACD;;;0CAuBqB;AAAA,UACZ1C,KADY,GACF,KAAKH,KADH,CACZG,KADY;;;AAGpB,aAAO,KAAKmH,UAAL,CAAgBnH,KAAhB,CAAP;AACD;;;+BAEUA,K,EAAO;AAAA,oBACc,KAAKH,KADnB;AAAA,UACRC,OADQ,WACRA,OADQ;AAAA,UACCI,QADD,WACCA,QADD;;;AAGhB,UAAIJ,OAAJ,EAAa;AACX,eAAOA,QAAQsH,MAAR,CAAe;AAAA,iBAAKC,EAAErH,KAAF,KAAYA,KAAjB;AAAA,SAAf,EAAuC,CAAvC,CAAP;AACD;;AAED,UAAIgH,eAAJ;;AAEAjI,YAAM2B,QAAN,CAAeC,OAAf,CAAuBT,QAAvB,EAAiC,UAAS0G,KAAT,EAAgB;AAC/C,YAAIA,MAAM/G,KAAN,CAAYG,KAAZ,KAAsBA,KAA1B,EAAiC;AAC/BgH,mBAASJ,KAAT;AACD;AACF,OAJD;;AAMA,aAAOI,MAAP;AACD;;;qCAEgBA,M,EAAQ;AAAA,oBACO,KAAKnH,KADZ;AAAA,UACfC,OADe,WACfA,OADe;AAAA,UACNI,QADM,WACNA,QADM;;;AAGvB,UAAIJ,OAAJ,EAAa;AACX,eAAOA,QAAQwH,OAAR,CAAgBN,MAAhB,CAAP;AACD;;AAED,UAAIO,qBAAJ;;AAEAxI,YAAM2B,QAAN,CAAeC,OAAf,CAAuBT,QAAvB,EAAiC,UAAS0G,KAAT,EAAgBtD,KAAhB,EAAuB;AACtD,YAAIsD,MAAM/G,KAAN,CAAYG,KAAZ,KAAsBgH,OAAOhH,KAAjC,EAAwC;AACtCuH,yBAAejE,KAAf;AACD;AACF,OAJD;;AAMA,aAAOiE,YAAP;AACD;;;gDAE2B;AAAA,UAClBzH,OADkB,GACN,KAAKD,KADC,CAClBC,OADkB;;;AAG1B,UAAM6D,WAAW,KAAKC,mBAAL,EAAjB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAED,UAAI7D,OAAJ,EAAa;AACX,eAAO6D,SAAS9C,KAAhB;AACD;;AAED,aAAO8C,SAAS9D,KAAT,CAAegB,KAAtB;AACD;;;gCAEW;AAAA,qBACoB,KAAKhB,KADzB;AAAA,UACFC,OADE,YACFA,OADE;AAAA,UACO0H,QADP,YACOA,QADP;;;AAGV,aAAO1H,QAAQ4E,MAAR,GAAiB8C,QAAxB;AACD;;;6CAE0C;AAAA,UAApBjH,KAAoB,uEAAZ,KAAKA,KAAO;AAAA,UACjCiH,QADiC,GACpB,KAAK3H,KADe,CACjC2H,QADiC;;AAGzC;;AACA,aACE,CAACjH,MAAMmB,MAAN,GAAe,IAAInB,MAAMkH,gBAA1B,KACGD,WAAW,KAAK1E,WAAL,GAAmB4B,MADjC,IAEAnE,MAAMkH,gBAHR;AAKD;;;qCAEgB;AACf,aAAO,IAAP;;AAEA;AACD;;;4BAEO;AACN,UAAI,KAAKxH,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkByH,KAAlB;AACD,OAFD,MAEO;AACL,aAAK/D,QAAL,CAAc+D,KAAd;AACD;AACF;;;iCA2HY1H,K,EAAOqF,K,EAAO;AACzB,UAAIA,KAAJ,EAAW;AACTA,cAAMsC,cAAN;AACD;;AAHwB,UAKjBtH,QALiB,GAKJ,KAAKR,KALD,CAKjBQ,QALiB;;;AAOzB,WAAKoE,MAAL,CAAY7C,SAAZ,EAAuB,EAAEgG,UAAU;AAAA,iBAAMvH,SAASL,KAAT,CAAN;AAAA,SAAZ,EAAvB;AACD;;AA2BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuIA;;;;kCAyBc;AAAA,qBACqD,KAAKH,KAD1D;AAAA,UACJI,YADI,YACJA,YADI;AAAA,UACU4H,mBADV,YACUA,mBADV;AAAA,UAC+BL,QAD/B,YAC+BA,QAD/B;AAAA,UACyC1H,OADzC,YACyCA,OADzC;AAAA,UAEJU,gBAFI,GAEiB,KAAKD,KAFtB,CAEJC,gBAFI;;;AAIZ,UAAI,CAACP,YAAL,EAAmB;AACjB,eAAOH,OAAP;AACD;;AAED,UAAI+H,mBAAJ,EAAyB;AACvB,eAAOrH,gBAAP;AACD;;AAED,aAAOA,iBAAiBsH,KAAjB,CAAuB,CAAvB,EAA0BN,QAA1B,CAAP;AACD;;AAED;;;;gDAC4B;AAC1B,UAAM1H,UAAU,KAAKgD,WAAL,EAAhB;AAD0B,UAElBgC,oBAFkB,GAEO,KAAKvE,KAFZ,CAElBuE,oBAFkB;;;AAI1B,UAAIiD,IAAI,CAAR;AACA,aAAOA,IAAIjI,QAAQ4E,MAAnB,EAA2B;AACzB,YAAI5E,QAAQiI,CAAR,EAAW/H,KAAX,KAAqB8E,oBAAzB,EAA+C;AAC7C,cAAIiD,IAAI,CAAJ,IAAS,CAAb,EAAgB;AACd,mBAAOjI,QAAQiI,IAAI,CAAZ,CAAP;AACD;AACF;AACDA;AACD;AACF;;AAED;;;;4CACwB;AACtB,UAAMjI,UAAU,KAAKgD,WAAL,EAAhB;AADsB,UAEdgC,oBAFc,GAEW,KAAKvE,KAFhB,CAEduE,oBAFc;;;AAItB,UAAIiD,IAAI,CAAR;AACA,aAAOA,IAAIjI,QAAQ4E,MAAnB,EAA2B;AACzB,YAAI5E,QAAQiI,CAAR,EAAW/H,KAAX,KAAqB8E,oBAAzB,EAA+C;AAC7C,cAAIiD,IAAI,CAAJ,GAAQjI,QAAQ4E,MAApB,EAA4B;AAC1B,mBAAO5E,QAAQiI,IAAI,CAAZ,CAAP;AACD;AACF;AACDA;AACD;AACF;;AAED;;;;8BACU/H,K,EAAO;AAAA,UACPyH,gBADO,GACc,KAAKlH,KADnB,CACPkH,gBADO;;;AAGf,UAAMO,iBAAiB9I,SAAS+I,WAAT,CACrB,KAAKnI,OAAL,CAAawF,eAAetF,KAAf,CAAb,CADqB,CAAvB;AAGA,UAAM2E,OAAOzF,SAAS+I,WAAT,CAAqB,KAAKtD,IAA1B,CAAb;;AAEA;AACA;AACA;AACA,UAAI,CAACqD,cAAL,EAAqB;AACnB;AACD;;AAED,UAAIE,aAAaF,eAAeG,SAAhC;;AAEA,UAAMC,kBAAkBzD,KAAK0D,UAAL,KAAoBL,cAA5C;;AAEA;AACA,UAAII,eAAJ,EAAqB;AACnBF,sBAAcT,gBAAd;AACD;;AAED9C,WAAK2D,SAAL,GAAiBJ,UAAjB;AACD;;AAED;;;;gCACYlI,K,EAAOuI,O,EAAS;AAAA,UAClBd,gBADkB,GACG,KAAKlH,KADR,CAClBkH,gBADkB;;;AAG1B,UAAMO,iBAAiB9I,SAAS+I,WAAT,CACrB,KAAKnI,OAAL,CAAawF,eAAetF,KAAf,CAAb,CADqB,CAAvB;AAGA,UAAM2E,OAAOzF,SAAS+I,WAAT,CAAqB,KAAKtD,IAA1B,CAAb;;AAEA,UAAMyD,kBAAkBzD,KAAK0D,UAAL,KAAoBL,cAA5C;AACA,UAAMQ,iBAAiB7D,KAAK8D,SAAL,KAAmBT,cAA1C;;AAEA,cAAQO,OAAR;AACE,aAAK,KAAL;AACE,cAAIG,WAAWV,eAAeG,SAA9B;;AAEA,cAAIC,eAAJ,EAAqB;AACnBM,wBAAYjB,gBAAZ;AACD;;AAED,cAAIiB,WAAW/D,KAAK2D,SAApB,EAA+B;AAC7B3D,iBAAK2D,SAAL,GAAiBI,QAAjB;AACD;;AAED;;AAEF,aAAK,QAAL;AACE,cAAIC,cACFX,eAAeG,SAAf,GAA2BH,eAAeY,YAD5C;;AAGA,cAAIJ,cAAJ,EAAoB;AAClBG,2BAAelB,gBAAf;AACD;;AAED,cAAIkB,cAAchE,KAAK2D,SAAL,GAAiB3D,KAAKiE,YAAxC,EAAsD;AACpDjE,iBAAK2D,SAAL,GAAiBK,cAAchE,KAAKiE,YAApC;AACD;;AAED;AA1BJ;AA4BD;;AAED;;;;uCACmB;AAAA,UACT9I,OADS,GACG,KAAKD,KADR,CACTC,OADS;;;AAGjB,UAAM+I,gBAAgB3J,SAAS+I,WAAT,CAAqB,KAAKtD,IAA1B,CAAtB;AACA,UAAMmE,SAASC,SACbzH,OAAO0H,gBAAP,CAAwBH,aAAxB,EAAuCI,cAD1B,CAAf;AAGA,UAAMvH,SAASmH,cAAcK,YAA7B;;AAEA,UAAMzB,mBAAmBsB,SACvBzH,OAAO0H,gBAAP,CAAwBH,aAAxB,EAAuCM,UADhB,CAAzB;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAM5I,QAAQ,EAAEmB,cAAF,EAAU+F,kCAAV,EAA4BqB,cAA5B,EAAd;;AAEA,UAAI,KAAK9F,aAAL,MAAwBlD,OAAxB,IAAmC,KAAKqD,SAAL,EAAvC,EAAyD;AACvD5C,cAAMsC,WAAN,GAAoB,KAAKuG,sBAAL,CAA4B7I,KAA5B,CAApB;AACD;;AAED,WAAKY,QAAL,CAAcZ,KAAd;AACD;;;oCAEe;AAAA,qBAC8C,KAAKV,KADnD;AAAA,UACNM,IADM,YACNA,IADM;AAAA,UACAF,YADA,YACAA,YADA;AAAA,UACc4H,mBADd,YACcA,mBADd;AAAA,UACmC1F,MADnC,YACmCA,MADnC;;;AAGd,aACE,CAAChC,IAAD,KACEF,gBAAgB4H,mBAAjB,IAAyC,CAAC5H,YAD3C,KAEAkC,MAHF;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;yCAnDqBrC,O,EAASE,K,EAAO;AACnC;AACA,UAAI,CAACA,KAAL,EAAY;AACV,eAAOF,OAAP;AACD;;AAEDE,cAAQA,MAAMqJ,WAAN,EAAR;;AAEA,aAAOvJ,QAAQsH,MAAR,CAAe,kBAAwB;AAAA,YAArBvG,KAAqB,UAArBA,KAAqB;AAAA,YAAdyI,OAAc,UAAdA,OAAc;;AAC5C,eAAO,CAACA,WAAWzI,KAAZ,EAAmBwI,WAAnB,GAAiC/B,OAAjC,CAAyCtH,KAAzC,KAAmD,CAA1D;AACD,OAFM,CAAP;AAGD;;;;EA12CiChB,a;;AAAfY,M,CACZ2J,S,GAAY;AACjB;AACAzJ,WAASb,UAAUuK,OAAV,CACPvK,UAAUwK,KAAV,CAAgB;AACd;AACAzJ,WAAOT,eAFO;AAGd;AACAsB,WAAO5B,UAAUQ,MAJH;AAKd;AACA8D,UAAMtE,UAAUyK;AANF,GAAhB,CADO,CAFQ;;AAajB;AACAlD,QAAMvH,UAAUQ,MAdC;;AAgBjB;AACAoB,SAAO5B,UAAUQ,MAjBA;;AAmBjB;AACAgD,eAAaxD,UAAUQ,MApBN;;AAsBjB;AACA6C,UAAQrD,UAAUU,IAAV,CAAegK,UAvBN;;AAyBjB;AACA5I,kBAAgB9B,UAAUU,IAAV,CAAegK,UA1Bd;;AA4BjB;AACA;AACAtH,eAAapD,UAAUU,IA9BN;;AAgCjB;AACA4C,YAAUtD,UAAUU,IAjCH;;AAmCjB;AACA6C,YAAUvD,UAAUU,IAAV,CAAegK,UApCR;;AAsCjB;AACA3J,SAAOT,eAvCU;;AAyCjB;AACAc,YAAUpB,UAAU2K,IA1CH;;AA4CjB;AACA/D,WAAS5G,UAAU2K,IA7CF;;AA+CjB;AACA;AACA;AACA;AACAC,UAAQ5K,UAAU2K,IAnDD;;AAqDjB;AACA;AACA;AACA9I,YAAU7B,UAAUU,IAAV,CAAegK,UAxDR;;AA0DjB;AACA/G,aAAW3D,UAAUQ,MA3DJ;;AA6DjB;AACAqG,kBAAgB7G,UAAUQ,MA9DT;;AAgEjB;AACAkD,SAAO1D,UAAU6K,MAjEA;;AAmEjB;AACA;AACA;AACA;AACAnE,WAAS1G,UAAUU,IAvEF;;AAyEjB;AACAiG,YAAU3G,UAAUS,MA1EH;;AA4EjB;AACA;AACAO,gBAAchB,UAAUU,IA9EP;;AAgFjB;AACA;AACAkI,uBAAqB5I,UAAUU,IAlFd;;AAoFjB;AACAyC,aAAWnD,UAAU8K,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CArFM;;AAuFjB;AACA;AACA;AACA5J,QAAMlB,UAAUU,IA1FC;;AA4FjB;AACA;AACAS,WAASnB,UAAU2B,OA9FF;;AAgGjB;AACA;AACA;AACAuB,UAAQlD,UAAUU,IAAV,CAAegK,UAnGN;;AAqGjB;AACA;AACA;AACAzH,UAAQjD,UAAUU,IAxGD;;AA0GjB;AACA;AACA;AACA6H,YAAUvI,UAAUS,MAAV,CAAiBiK,UA7GV;;AA+GjB;AACA9E,oBAAkB5F,UAAUU,IAhHX;;AAkHjBqK,sBAAoB/K,UAAUU,IAAV,CAAegK,UAlHlB;;AAoHjBM,YAAUhL,UAAU2K,IApHH;;AAsHjBM,YAAUjL,UAAU2K,IAtHH;;AAwHjBO,+BAA6BlL,UAAUU;;AAEvC;AACA;AACA;AA5HiB,C;AADAC,M,CAgIZwK,Y,GAAe;AACpBhI,aAAW,MADS;AAEpBD,UAAQ,IAFY;AAGpBqF,YAAU,CAHU;AAIpB3C,oBAAkB,IAJE;AAKpBmF,sBAAoB,IALA;AAMpBlJ,YAAU,KANU;AAOpBwB,UAAQ,KAPY;AAQpBvB,kBAAgB,KARI;;AAUpB;AACAyB,YAAU,KAXU;;AAapB2H,+BAA6B;;AAE7B;AACA;AACA;AAjBoB,C;;;;;OAoBtB5J,K,GAAQ;AACN;AACAkH,sBAAkB;AAFZ,G;;OA2mBRf,uB,GAA0B,iBAAS;AAAA,QACzBrG,QADyB,GACZ,OAAKR,KADO,CACzBQ,QADyB;;;AAGjC,QAAIL,QAAQqF,MAAMgF,MAAN,CAAarK,KAAzB;;AAEA;AACA,QAAIA,UAAUV,wBAAd,EAAwC;AACtC;AACAU,cAAQ4B,SAAR;AACD;;AAEDvB,aAASL,KAAT;AACD,G;;OAEDqB,6B,GAAgC,YAAM;AACpC;AACA;AACAnC,aAAS+I,WAAT,CAAqB,OAAK3F,MAA1B,EAAkCK,KAAlC,CAAwC2H,KAAxC,GACEpL,SAAS+I,WAAT,CAAqB,OAAKtE,QAA1B,EAAoC4G,WAApC,GAAkD,CAAlD,GAAsD,IADxD;AAED,G;;OA2FD9F,M,GAAS,UAACY,KAAD,EAAgC;AAAA,QAAxBmF,cAAwB,uEAAP,EAAO;;AACvC,QAAInF,KAAJ,EAAW;AACT;AACAA,YAAMsC,cAAN;;AAEA;AACA;AACA;AACA;AACA;AACD;;AAVsC,mBAsBnC,OAAK9H,KAtB8B;AAAA,QAarCM,IAbqC,YAarCA,IAbqC;AAAA,QAcrCoC,QAdqC,YAcrCA,QAdqC;AAAA,QAerCtC,YAfqC,YAerCA,YAfqC;AAAA,QAgBrCH,OAhBqC,YAgBrCA,OAhBqC;AAAA,QAiBrCE,KAjBqC,YAiBrCA,KAjBqC;AAAA,QAkBrCgK,kBAlBqC,YAkBrCA,kBAlBqC;AAAA,QAmBrCE,QAnBqC,YAmBrCA,QAnBqC;AAAA,QAoBrCnJ,cApBqC,YAoBrCA,cApBqC;AAAA,QAqBrCoJ,2BArBqC,YAqBrCA,2BArBqC;;;AAwBvC,QAAIpJ,cAAJ,EAAoB;AAClB;AACD;;AAED,QAAIwB,QAAJ,EAAc;AACZ;AACD;;AA9BsC,QAgC/Bd,QAhC+B,GAgClB,OAAKlB,KAhCa,CAgC/BkB,QAhC+B;;;AAkCvC,QAAI,CAACA,QAAD,IAAaxB,YAAjB,EAA+B;AAC7B,aAAKkB,QAAL,CAAc;AACZ;AACA;AACA;AACA6E,kCAA0B,EAJd;AAKZxF,0BAAkBV;AALN,OAAd;;AAQA;AACA;AACA;AACA;AACD;;AAED;AACA;AACA;AACA;AACAkC,iBAAa,OAAKjC,QAAL,CAAc0K,QAA3B;AACAzI,iBAAa,OAAKjC,QAAL,CAAc2K,aAA3B;AACA1I,iBAAa,OAAKjC,QAAL,CAAc4K,cAA3B;AACA,WAAK5K,QAAL,CAAc0K,QAAd,GAAyBG,WAAW,YAAM;AACxC,aAAO,OAAK7K,QAAL,CAAc0K,QAArB;AACA,aAAKtJ,QAAL,CAAc;AACZM,kBAAU,CAACA;AADC,OAAd;;AAIA,UAAI,CAACA,QAAD,IAAa3B,OAAjB,EAA0B;AACxB;AACA;;AAEA,YAAMgF,uBAAuB9E,SAASF,QAAQ,CAAR,EAAWE,KAAjD;;AAEA,eAAKmB,QAAL,CAAc,EAAE2D,0CAAF,EAAd;;AAEA;AACA,eAAK+F,SAAL,CAAe/F,oBAAf;AACD;;AAED;AACA;;AAEA,UAAI,CAAC0F,eAAeM,uBAApB,EAA6C;AAC3C,YAAI7K,YAAJ,EAAkB;AAChB,cAAI,CAACwB,QAAD,IAAcA,YAAYuI,kBAA9B,EAAmD;AACjD,mBAAKjK,QAAL,CAAc2K,aAAd,GAA8BE,WAAW,YAAM;AAC7C,qBAAO,OAAK7K,QAAL,CAAc2K,aAArB;AACA;AACA,kBAAIjJ,QAAJ,EAAc;AACZ,uBAAKkC,QAAL,CAAc+D,KAAd;AACD,eAFD,MAEO;AACL,uBAAKzH,YAAL,CAAkByH,KAAlB;AACD;AACF,aAR6B,EAQ3B,CAR2B,CAA9B;AASD;AACF,SAZD,MAYO;AACL;AACA;AACA;AACA,cAAI,CAACvH,IAAL,EAAW;AACT,mBAAKwD,QAAL,CAAc+D,KAAd;AACD;AACF;AACF;;AAED,UAAI,CAACjG,QAAD,IAAa0I,2BAAb,IAA4C,OAAKxF,IAArD,EAA2D;AACzD,eAAK5E,QAAL,CAAc4K,cAAd,GAA+BC,WAAW,YAAM;AAC9C,cAAI,OAAKjG,IAAL,CAAUoG,sBAAd,EAAsC;AACpC,mBAAKpG,IAAL,CAAUoG,sBAAV;AACD,WAFD,MAEO,IAAI,OAAKpG,IAAL,CAAUgG,cAAd,EAA8B;AACnC,mBAAKhG,IAAL,CAAUgG,cAAV;AACD;AACD,iBAAO,OAAK5K,QAAL,CAAc4K,cAArB;AACD,SAP8B,EAO5B,GAP4B,CAA/B;AAQD;;AAED,UAAIT,QAAJ,EAAc;AACZA,iBAAS,CAACzI,QAAV;AACD;;AAED,UAAI+I,eAAe5C,QAAnB,EAA6B;AAC3B4C,uBAAe5C,QAAf;AACD;AACF,KA9DwB,EA8DtB,CA9DsB,CAAzB;AA+DD,G;;OAYD1G,gB,GAAmB,iBAAS;AAC1B,QAAMjB,eAAef,SAAS+I,WAAT,CAAqB,OAAKhI,YAA1B,CAArB;AACA,QAAM+K,kBAAkB9L,SAAS+I,WAAT,CAAqB,OAAKtE,QAA1B,CAAxB;AACA,QAAMsH,eAAe/L,SAAS+I,WAAT,CAAqB,OAAKtD,IAA1B,CAArB;;AAEA;AACA;AACA;AACA,QACGsG,gBAAgBA,aAAaC,QAAb,CAAsB7F,MAAMgF,MAA5B,CAAjB,IACCpK,gBAAgBA,aAAaiL,QAAb,CAAsB7F,MAAMgF,MAA5B,CADjB,IAECW,mBAAmBA,gBAAgBE,QAAhB,CAAyB7F,MAAMgF,MAA/B,CAHtB,EAIE;AACA;AACD;;AAED,WAAKlJ,QAAL,CAAc,EAAEM,UAAU,KAAZ,EAAd;;AAhB0B,QAkBlByI,QAlBkB,GAkBL,OAAKrK,KAlBA,CAkBlBqK,QAlBkB;;;AAoB1B,QAAIA,QAAJ,EAAc;AACZA,eAAS,KAAT;AACD;AACF,G;;OAWDlG,wB,GAA2B,iBAAS;AAClC,QAAIqB,MAAM8F,OAAN,IAAiB9F,MAAM+F,MAAvB,IAAiC/F,MAAMgG,QAAvC,IAAmDhG,MAAMiG,OAA7D,EAAsE;AACpE;AACD;;AAHiC,QAK1B7J,QAL0B,GAKb,OAAKlB,KALQ,CAK1BkB,QAL0B;;;AAOlC,YAAQ4D,MAAMkG,OAAd;AACE;AACA,WAAK,CAAL;AACE,YAAI9J,QAAJ,EAAc;AACZ,iBAAKgD,MAAL,CAAY7C,SAAZ,EAAuB,EAAEkJ,yBAAyB,IAA3B,EAAvB;;AADY,cAGJb,QAHI,GAGS,OAAKpK,KAHd,CAGJoK,QAHI;;;AAKZ,cAAIA,QAAJ,EAAc;AACZA,qBAAS5E,KAAT;AACD;AACF;AACD;AAZJ;AAcD,G;;OAEDgB,W,GAAc,iBAAS;AACrB,QAAIhB,MAAM8F,OAAN,IAAiB9F,MAAM+F,MAAvB,IAAiC/F,MAAMgG,QAAvC,IAAmDhG,MAAMiG,OAA7D,EAAsE;AACpE;AACD;;AAHoB,mBAKoB,OAAKzL,KALzB;AAAA,QAKbC,OALa,YAKbA,OALa;AAAA,QAKJE,KALI,YAKJA,KALI;AAAA,QAKGC,YALH,YAKGA,YALH;AAAA,kBAMsB,OAAKM,KAN3B;AAAA,QAMbkB,QANa,WAMbA,QANa;AAAA,QAMHqD,oBANG,WAMHA,oBANG;;AAQrB;;AACA,QAAIhF,OAAJ,EAAa;AACX,cAAQuF,MAAMkG,OAAd;AACE;AACA,aAAK,EAAL;AACElG,gBAAMsC,cAAN;;AAEA,cAAM6D,WAAW,OAAKC,yBAAL,EAAjB;;AAEA,cAAID,QAAJ,EAAc;AACZ,mBAAKE,WAAL,CAAiBF,SAASxL,KAA1B,EAAiC,KAAjC;AACA,mBAAO,OAAKmB,QAAL,CAAc,EAAE2D,sBAAsB0G,SAASxL,KAAjC,EAAd,CAAP;AACD;;AAED;;AAEF;AACA,aAAK,EAAL;AACEqF,gBAAMsC,cAAN;;AAEA,cAAMgE,OAAO,OAAKC,qBAAL,EAAb;;AAEA,cAAID,IAAJ,EAAU;AACR,mBAAKD,WAAL,CAAiBC,KAAK3L,KAAtB,EAA6B,QAA7B;AACA,mBAAO,OAAKmB,QAAL,CAAc,EAAE2D,sBAAsB6G,KAAK3L,KAA7B,EAAd,CAAP;AACD;;AAED;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,aAAK,EAAL;AACE;AACA,cAAI,OAAKO,KAAL,CAAWkB,QAAf,EAAyB;AACvB,mBAAKgD,MAAL;;AAEA;AACA,mBAAK1E,QAAL,CAAc8L,eAAd,GAAgCjB,WAAW,YAAM;AAC/C,qBAAKjH,QAAL,CAAc+D,KAAd;AACA,qBAAO,OAAK3H,QAAL,CAAc8L,eAArB;AACD,aAH+B,EAG7B,CAH6B,CAAhC;AAID;;AAED;;AAEF;AACA,aAAK,EAAL;AACE;AACA,cAAIpK,QAAJ,EAAc;AACZ4D,kBAAMsC,cAAN;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAI,OAAK7E,WAAL,MAAsB,OAAKA,WAAL,GAAmB4B,MAAnB,GAA4B,CAAtD,EAAyD;AACvD;AACA,qBAAKU,YAAL,CAAkBN,oBAAlB;AACA;AACA,qBAAKL,MAAL;AACD;AACF,WAdD,MAcO;AACL;AACA;AACA;AACA;AACA,gBAAIrF,mBAAmBF,SAAS+I,WAAT,CAAqB,OAAKnE,MAA1B,CAAnB,CAAJ,EAA2D;AACzDuB,oBAAMsC,cAAN;AACD;AACF;;AAED;;AAEF;AACA,aAAK,EAAL;AACE;AACA,cAAIlG,QAAJ,EAAc;AACZ;AACA;AACA,gBAAI,OAAKqB,WAAL,MAAsB,CAAC7C,YAA3B,EAAyC;AACvCoF,oBAAMsC,cAAN;;AAEA;AACA;AACA;AACA;AACA,qBAAKvC,YAAL,CAAkBN,oBAAlB;AACA,qBAAKL,MAAL;AACD;AACF;AACD;AACA;;AAEA;AAhGJ;AAkGD;AACF,G;;OAGD6B,O,GAAU,iBAAS;AAAA,mBACS,OAAKzG,KADd;AAAA,QACTgK,MADS,YACTA,MADS;AAAA,QACD7J,KADC,YACDA,KADC;;AAGjB;AACA;AACA;;AACA,QAAI6J,MAAJ,EAAY;AACV,UAAMiC,sBACDzG,KADC;AAEJgF,6BACKhF,MAAMgF,MADX;AAEErK;AAFF;AAFI,QAAN;;AAQA;AACA;AACA8L,aAAOC,eAAP,GAAyB1G,MAAM0G,eAA/B;AACAD,aAAOnE,cAAP,GAAwBtC,MAAMsC,cAA9B;;AAEAkC,aAAOiC,MAAP;AACD;AACF,G;;OA6LD1F,4B,GAA+B,iBAAS;AAAA,QAC9BtG,OAD8B,GAClB,OAAKD,KADa,CAC9BC,OAD8B;;AAEtC,QAAMkM,QAAQ3G,MAAMgF,MAAN,CAAarK,KAA3B;AACA,QAAMQ,mBAAmB,OAAKC,oBAAL,CAA0BX,OAA1B,EAAmCkM,KAAnC,CAAzB;;AAEA,WAAK7K,QAAL,CAAc;AACZ6E,gCAA0BgG,KADd;AAEZxL,wCAFY;AAGZsE,4BACEtE,iBAAiBkE,MAAjB,GAA0B,CAA1B,GAA8BlE,iBAAiB,CAAjB,EAAoBR,KAAlD,GAA0D4B;AAJhD,KAAd;AAMD,G;;;eAv3CkBhC,M;;;AAq5CrBA,OAAO4F,SAAP,GAAmB,UAAS3F,KAAT,EAAgB;AACjC,SAAO,6BAAK,WAAU,yBAAf,GAAP;AACD,CAFD;;AAIA,IAAM6F,yCAAyC;AAC7CuG,WAAS;AADoC,CAA/C;;AAIA;AACA;AACA,SAAS3G,cAAT,CAAwBtF,KAAxB,EAA+B;AAC7B,SAAOoE,eAAepE,KAAf,IAAwB,yBAAxB,GAAoDA,KAA3D;AACD;;AAED,SAASoE,cAAT,CAAwBpE,KAAxB,EAA+B;AAC7B,SAAOA,UAAU,IAAV,IAAkBA,UAAU4B,SAAnC;AACD","file":"select.js","sourcesContent":["// https://github.com/halt-hammerzeit/react-responsive-ui/blob/master/source/select.js\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nimport { submit_parent_form, get_scrollbar_width } from './misc/dom';\n\n// Possible enhancements:\n//\n//  * If the menu is close to a screen edge,\n//    automatically reposition it so that it fits on the screen\n//  * Maybe show menu immediately above the toggler\n//    (like in Material design), not below it.\n//\n// https://material.google.com/components/menus.html\n\nconst Empty_value_option_value = '';\n\nconst value_prop_type = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.bool,\n]);\n\nexport default class Select extends PureComponent {\n  static propTypes = {\n    // A list of selectable options\n    options: PropTypes.arrayOf(\n      PropTypes.shape({\n        // Option value (may be `undefined`)\n        value: value_prop_type,\n        // Option label (may be `undefined`)\n        label: PropTypes.string,\n        // Option icon\n        icon: PropTypes.node,\n      }),\n    ),\n\n    // HTML form input `name` attribute\n    name: PropTypes.string,\n\n    // Label which is placed above the select\n    label: PropTypes.string,\n\n    // Placeholder (like \"Choose\")\n    placeholder: PropTypes.string,\n\n    // Whether to use native `<select/>`\n    native: PropTypes.bool.isRequired,\n\n    // Whether to use native `<select/>` when expanded\n    nativeExpanded: PropTypes.bool.isRequired,\n\n    // Show icon only for selected item,\n    // and only if `concise` is `true`.\n    saveOnIcons: PropTypes.bool,\n\n    // Disables this control\n    disabled: PropTypes.bool,\n\n    // Set to `true` to mark the field as required\n    required: PropTypes.bool.isRequired,\n\n    // Selected option value\n    value: value_prop_type,\n\n    // Is called when an option is selected\n    onChange: PropTypes.func,\n\n    // Is called when the select is focused\n    onFocus: PropTypes.func,\n\n    // Is called when the select is blurred.\n    // This `onBlur` interceptor is a workaround for `redux-form`,\n    // so that it gets the parsed `value` in its `onBlur` handler,\n    // not the formatted text.\n    onBlur: PropTypes.func,\n\n    // (exotic use case)\n    // Falls back to a plain HTML input\n    // when javascript is disabled (e.g. Tor)\n    fallback: PropTypes.bool.isRequired,\n\n    // Component CSS class\n    className: PropTypes.string,\n\n    // Autocomplete `<input/>` CSS class\n    inputClassName: PropTypes.string,\n\n    // CSS style object\n    style: PropTypes.object,\n\n    // If this flag is set to `true`,\n    // and `icon` is specified for a selected option,\n    // then the selected option will be displayed\n    // as icon only, without the label.\n    concise: PropTypes.bool,\n\n    // HTML `tabindex` attribute\n    tabIndex: PropTypes.number,\n\n    // If set to `true`, autocompletion is available\n    // upon expanding the options list.\n    autocomplete: PropTypes.bool,\n\n    // If set to `true`, autocomple will show all\n    // matching options instead of just `maxItems`.\n    autocompleteShowAll: PropTypes.bool,\n\n    // Options list alignment (\"left\", \"right\")\n    alignment: PropTypes.oneOf(['left', 'right']),\n\n    // If `menu` flag is set to `true`\n    // then it's gonna be a dropdown menu\n    // with `children` elements inside.\n    menu: PropTypes.bool,\n\n    // If `menu` flag is set to `true`\n    // then `toggler` is the dropdown menu button.\n    toggler: PropTypes.element,\n\n    // If `scroll` is `false`, then options list\n    // is not limited in height.\n    // Is `true` by default (scrollable).\n    scroll: PropTypes.bool.isRequired,\n\n    // If this flag is set to `true`,\n    // then the dropdown expands itself upward.\n    // (as opposed to the default downward)\n    upward: PropTypes.bool,\n\n    // Maximum items fitting the options list height (scrollable).\n    // In case of `autocomplete` that's the maximum number of matched items shown.\n    // Is `6` by default.\n    maxItems: PropTypes.number.isRequired,\n\n    // Is `true` by default (only when the list of options is scrollable)\n    scrollbarPadding: PropTypes.bool,\n\n    focusUponSelection: PropTypes.bool.isRequired,\n\n    onTabOut: PropTypes.func,\n\n    onToggle: PropTypes.func,\n\n    automaticallyScrollIntoView: PropTypes.bool,\n\n    // transition_item_count_min : PropTypes.number,\n    // transition_duration_min : PropTypes.number,\n    // transition_duration_max : PropTypes.number\n  };\n\n  static defaultProps = {\n    alignment: 'left',\n    scroll: true,\n    maxItems: 6,\n    scrollbarPadding: true,\n    focusUponSelection: true,\n    fallback: false,\n    native: false,\n    nativeExpanded: false,\n\n    // Set to `true` to mark the field as required\n    required: false,\n\n    automaticallyScrollIntoView: false,\n\n    // transition_item_count_min : 1,\n    // transition_duration_min : 60, // milliseconds\n    // transition_duration_max : 100 // milliseconds\n  };\n\n  state = {\n    // Is initialized during the first `componentDidUpdate()` call\n    vertical_padding: 0,\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Shouldn't memory leak because\n    // the set of options is assumed to be constant.\n    this.options = {};\n    // any timeouts will be cleared when unmounted\n    this.timeouts = {};\n    const {\n      value,\n      autocomplete,\n      options,\n      children,\n      menu,\n      toggler,\n      onChange,\n    } = props;\n\n    if (autocomplete) {\n      if (!options) {\n        throw new Error(\n          `\"options\" property is required for an \"autocomplete\" select`,\n        );\n      }\n\n      this.state.matching_options = this.get_matching_options(options, value);\n    }\n\n    if (children && !menu) {\n      React.Children.forEach(children, element => {\n        if (!element.props.value) {\n          throw new Error(\n            `You must specify \"value\" prop on each child of <Select/>`,\n          );\n        }\n\n        if (!element.props.label) {\n          throw new Error(\n            `You must specify \"label\" prop on each child of <Select/>`,\n          );\n        }\n      });\n    }\n\n    if (menu && !toggler) {\n      throw new Error(\n        `Supply a \"toggler\" component when enabling \"menu\" in <Select/>`,\n      );\n    }\n\n    if (!menu && !onChange) {\n      throw new Error(`\"onChange\" property must be specified for <Select/>`);\n    }\n  }\n\n  // Client side rendering, javascript is enabled\n  componentDidMount() {\n    const { fallback, nativeExpanded } = this.props;\n\n    document.addEventListener('click', this.document_clicked);\n\n    if (fallback) {\n      this.setState({ javascript: true });\n    }\n\n    if (nativeExpanded) {\n      this.resize_native_expanded_select();\n      window.addEventListener('resize', this.resize_native_expanded_select);\n    }\n  }\n\n  componentDidUpdate(previous_props, previous_state) {\n    const { nativeExpanded, value } = this.props;\n    const { expanded, height } = this.state;\n\n    if (expanded !== previous_state.expanded) {\n      if (expanded && this.should_animate()) {\n        if (height === undefined) {\n          this.calculate_height();\n        }\n      }\n    }\n\n    // If the `value` changed then resize the native expanded `<select/>`\n    if (nativeExpanded && value !== previous_props.value) {\n      this.resize_native_expanded_select();\n    }\n  }\n\n  componentWillUnmount() {\n    const { nativeExpanded } = this.props;\n\n    document.removeEventListener('click', this.document_clicked);\n\n    if (nativeExpanded) {\n      window.removeEventListener('resize', this.resize_native_expanded_select);\n    }\n    for (const timeoutID of Object.keys(this.timeouts)) {\n      clearTimeout(this.timeouts[timeoutID]);\n    }\n  }\n\n  render() {\n    const {\n      id,\n      upward,\n      scroll,\n      children,\n      menu,\n      toggler,\n      alignment,\n      autocomplete,\n      saveOnIcons,\n      fallback,\n      native,\n      nativeExpanded,\n      disabled,\n      required,\n      placeholder,\n      label,\n      value,\n      error,\n      style,\n      className,\n    } = this.props;\n\n    const { expanded, list_height } = this.state;\n\n    const options = this.get_options();\n\n    let list_style;\n\n    // Makes the options list scrollable (only when not in `autocomplete` mode).\n    if (this.is_scrollable() && this.state.list_height !== undefined) {\n      list_style = { maxHeight: `${list_height}px` };\n    }\n\n    const overflow = scroll && options && this.overflown();\n\n    let list_items;\n\n    // If a list of options is supplied as an array of `{ value, label }`,\n    // then transform those elements to <buttons/>\n    if (options) {\n      list_items = options.map(({ value, label, icon }, index) => {\n        return this.render_list_item({\n          index,\n          value,\n          label,\n          icon: !saveOnIcons && icon,\n          overflow,\n        });\n      });\n    } else {\n      // Else, if a list of options is supplied as a set of child React elements,\n      // then render those elements.\n      list_items = React.Children.map(children, (element, index) => {\n        if (!element) {\n          return;\n        }\n\n        return this.render_list_item({ index, element });\n      });\n    }\n\n    const wrapper_style = { textAlign: alignment };\n\n    const selected = this.get_selected_option();\n\n    const markup = (\n      <div\n        ref={ref => (this.select = ref)}\n        onKeyDown={this.on_key_down_in_container}\n        style={style ? { ...wrapper_style, ...style } : wrapper_style}\n        className={classNames(\n          'rrui__select',\n          {\n            rrui__rich: fallback,\n            'rrui__select--menu': menu,\n            'rrui__select--upward': upward,\n            'rrui__select--expanded': expanded,\n            'rrui__select--collapsed': !expanded,\n            'rrui__select--disabled': disabled,\n          },\n          className,\n        )}\n      >\n        <div\n          className={classNames({\n            rrui__input: !menu,\n          })}\n        >\n          {/* Currently selected item */}\n          {!menu && !native && this.render_selected_item()}\n\n          {/* Label */}\n          {/* (this label is placed after the \"selected\" button\n\t\t\t\t\t     to utilize the CSS `+` selector) */}\n          {/* If the `placeholder` wasn't specified\n\t\t\t\t\t    but `label` was and no option is currently selected\n\t\t\t\t\t    then the `label` becomes the `placeholder`\n\t\t\t\t\t    until something is selected */}\n          {label &&\n            (this.get_selected_option() || placeholder) &&\n            <label\n              htmlFor={id}\n              className={classNames('rrui__input-label', {\n                'rrui__input-label--required':\n                  required && value_is_empty(value),\n                'rrui__input-label--invalid': this.should_indicate_invalid(),\n              })}\n            >\n              {label}\n            </label>}\n\n          {/* Menu toggler */}\n          {menu &&\n            <div\n              ref={ref => this.menu_toggler}\n              className=\"rrui__select__toggler\"\n            >\n              {React.cloneElement(toggler, { onClick: this.toggle })}\n            </div>}\n\n          {/* The list of selectable options */}\n          {/* Math.max(this.state.height, this.props.max_height) */}\n          {!native &&\n            !nativeExpanded &&\n            list_items.length > 0 &&\n            <ul\n              ref={ref => (this.list = ref)}\n              style={list_style}\n              className={classNames(\n                'rrui__expandable',\n                'rrui__expandable--overlay',\n                'rrui__select__options',\n                'rrui__shadow',\n                {\n                  'rrui__select__options--menu': menu,\n                  'rrui__expandable--expanded': expanded,\n                  'rrui__select__options--expanded': expanded,\n                  'rrui__expandable--left-aligned': alignment === 'left',\n                  'rrui__expandable--right-aligned': alignment === 'right',\n                  'rrui__select__options--left-aligned':\n                    !children && alignment === 'left',\n                  'rrui__select__options--right-aligned':\n                    !children && alignment === 'right',\n                  // CSS selector performance optimization\n                  'rrui__select__options--upward': upward,\n                  'rrui__select__options--downward': !upward,\n                },\n              )}\n            >\n              {list_items}\n            </ul>}\n\n          {/* Fallback in case javascript is disabled */}\n          {(native || (fallback && !this.state.javascript)) &&\n            this.render_static()}\n        </div>\n\n        {/* Error message */}\n        {this.should_indicate_invalid() &&\n          <div className=\"rrui__input-error\">\n            {error}\n          </div>}\n      </div>\n    );\n\n    return markup;\n  }\n\n  render_list_item({ index, element, value, label, icon, overflow }) {\n    const { disabled, menu, scrollbarPadding } = this.props;\n    const { focused_option_value, expanded } = this.state;\n\n    // If a list of options is supplied as a set of child React elements,\n    // then extract values from their props.\n    if (element) {\n      value = element.props.value;\n    }\n\n    const is_focused = !menu && value === focused_option_value;\n\n    let item_style;\n\n    // on overflow the vertical scrollbar will take up space\n    // reducing padding-right and the only way to fix that\n    // is to add additional padding-right\n    //\n    // a hack to restore padding-right taken up by a vertical scrollbar\n    if (overflow && scrollbarPadding) {\n      item_style = { marginRight: get_scrollbar_width() + 'px' };\n    }\n\n    let button;\n\n    // If a list of options is supplied as a set of child React elements,\n    // then enhance those elements with extra props.\n    if (element) {\n      const extra_props = {\n        style: item_style\n          ? { ...item_style, ...element.props.style }\n          : element.props.style,\n        className: classNames(\n          'rrui__select__option',\n          {\n            'rrui__select__option--focused': is_focused,\n          },\n          element.props.className,\n        ),\n      };\n\n      const onClick = element.props.onClick;\n\n      extra_props.onClick = event => {\n        if (menu) {\n          this.toggle();\n        } else {\n          this.item_clicked(value, event);\n        }\n\n        if (onClick) {\n          onClick(event);\n        }\n      };\n\n      button = React.cloneElement(element, extra_props);\n    } else {\n      // Else, if a list of options is supplied as an array of `{ value, label }`,\n      // then transform those options to <buttons/>\n      button = (\n        <button\n          type=\"button\"\n          onClick={event => this.item_clicked(value, event)}\n          disabled={disabled}\n          tabIndex=\"-1\"\n          className={classNames('rrui__select__option', {\n            'rrui__select__option--focused': is_focused,\n            // CSS selector performance optimization\n            'rrui__select__option--disabled': disabled,\n          })}\n          style={item_style}\n        >\n          {icon &&\n            React.cloneElement(icon, {\n              className: classNames(\n                icon.props.className,\n                'rrui__select__option-icon',\n              ),\n            })}\n          {label}\n        </button>\n      );\n    }\n\n    const markup = (\n      <li\n        key={get_option_key(value)}\n        ref={ref => (this.options[get_option_key(value)] = ref)}\n        className={classNames(\n          'rrui__expandable__content',\n          'rrui__select__options-list-item',\n          {\n            'rrui__select__separator-option':\n              element && element.type === Select.Separator,\n            'rrui__expandable__content--expanded': expanded,\n            // CSS selector performance optimization\n            'rrui__select__options-list-item--expanded': expanded,\n          },\n        )}\n      >\n        {button}\n      </li>\n    );\n\n    return markup;\n  } // , first, last\n\n  // Renders the selected option\n  // and possibly a transparent native `<select/>` above it\n  // so that the native `<select/>` expands upon click\n  // on the selected option\n  // (in case of `nativeExpanded` setting).\n  render_selected_item() {\n    const { nativeExpanded } = this.props;\n\n    const selected = this.render_selected_item_only();\n\n    if (!nativeExpanded) {\n      return selected;\n    }\n\n    const markup = (\n      <div style={native_expanded_select_container_style}>\n        {this.render_static()}\n        {selected}\n      </div>\n    );\n\n    return markup;\n  }\n\n  render_selected_item_only() {\n    const {\n      children,\n      value,\n      placeholder,\n      label,\n      disabled,\n      autocomplete,\n      concise,\n      tabIndex,\n      onFocus,\n      inputClassName,\n    } = this.props;\n\n    const {\n      expanded,\n      autocomplete_width,\n      autocomplete_input_value,\n    } = this.state;\n\n    const selected = this.get_selected_option();\n    const selected_label = this.get_selected_option_label();\n\n    const selected_text = selected ? selected_label : placeholder || label;\n\n    if (autocomplete && expanded) {\n      // style = { ...style, width: autocomplete_width + 'px' }\n\n      const markup = (\n        <input\n          type=\"text\"\n          ref={ref => (this.autocomplete = ref)}\n          placeholder={selected_text}\n          value={autocomplete_input_value}\n          onChange={this.on_autocomplete_input_change}\n          onKeyDown={this.on_key_down}\n          onFocus={onFocus}\n          onBlur={this.on_blur}\n          tabIndex={tabIndex}\n          className={classNames(\n            'rrui__input-field',\n            'rrui__select__selected',\n            'rrui__select__selected--autocomplete',\n            {\n              'rrui__select__selected--nothing': !selected_label,\n              // CSS selector performance optimization\n              'rrui__select__selected--expanded': expanded,\n              'rrui__select__selected--disabled': disabled,\n            },\n            inputClassName,\n          )}\n        />\n      );\n\n      return markup;\n    }\n\n    const markup = (\n      <button\n        ref={ref => (this.selected = ref)}\n        type=\"button\"\n        disabled={disabled}\n        onClick={this.toggle}\n        onKeyDown={this.on_key_down}\n        onFocus={onFocus}\n        onBlur={this.on_blur}\n        tabIndex={tabIndex}\n        className={classNames('rrui__input-field', 'rrui__select__selected', {\n          'rrui__input-field--invalid': this.should_indicate_invalid(),\n          'rrui__select__selected--nothing': !selected_label,\n        })}\n      >\n        {/* http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers */}\n        <div className=\"rrui__select__selected-content\">\n          {/* Selected option label (or icon) */}\n          <div className=\"rrui__select__selected-label\">\n            {concise && selected && selected.icon\n              ? React.cloneElement(selected.icon, { title: selected_label })\n              : selected_text}\n          </div>\n\n          {/* An arrow */}\n          <div\n            className={classNames('rrui__select__arrow', {\n              // CSS selector performance optimization\n              'rrui__select__arrow--expanded': expanded,\n            })}\n          />\n        </div>\n      </button>\n    );\n\n    return markup;\n  }\n\n  // supports disabled javascript\n  render_static() {\n    const {\n      id,\n      name,\n      value,\n      label,\n      disabled,\n      options,\n      menu,\n      toggler,\n      fallback,\n      nativeExpanded,\n      children,\n    } = this.props;\n\n    if (menu) {\n      const markup = (\n        <div\n          className={classNames({\n            rrui__rich__fallback: fallback,\n          })}\n        >\n          {toggler}\n        </div>\n      );\n\n      return markup;\n    }\n\n    const markup = (\n      <select\n        ref={ref => (this.native = ref)}\n        id={id}\n        name={name}\n        value={value_is_empty(value) ? Empty_value_option_value : value}\n        disabled={disabled}\n        onChange={this.native_select_on_change}\n        className={classNames('rrui__input', 'rrui__select__native', {\n          'rrui__select__native-expanded': nativeExpanded,\n          rrui__rich__fallback: fallback,\n        })}\n      >\n        {options\n          ? this.render_native_select_options(options, value_is_empty(value))\n          : React.Children.map(children, child => {\n              if (!child) {\n                return;\n              }\n\n              const markup = (\n                <option\n                  className=\"rrui__select__native-option\"\n                  key={child.props.value}\n                  value={child.props.value}\n                >\n                  {child.props.label}\n                </option>\n              );\n\n              return markup;\n            })}\n      </select>\n    );\n\n    return markup;\n  }\n\n  render_native_select_options(options, empty_option_is_selected) {\n    const { placeholder } = this.props;\n\n    let empty_option_present = false;\n\n    const rendered_options = options.map(option => {\n      let { value, label } = option;\n\n      if (value_is_empty(value)) {\n        empty_option_present = true;\n        value = Empty_value_option_value;\n      }\n\n      const markup = (\n        <option\n          className=\"rrui__select__native-option\"\n          key={get_option_key(value)}\n          value={value}\n        >\n          {label}\n        </option>\n      );\n\n      return markup;\n    });\n\n    if (empty_option_is_selected && !empty_option_present) {\n      rendered_options.unshift(\n        <option\n          className=\"rrui__select__native-option\"\n          key={get_option_key(undefined)}\n          value=\"\"\n        >\n          {placeholder}\n        </option>,\n      );\n    }\n\n    return rendered_options;\n  }\n\n  // Whether should indicate that the input value is invalid\n  should_indicate_invalid() {\n    const { indicateInvalid, error } = this.props;\n\n    return indicateInvalid && error;\n  }\n\n  native_select_on_change = event => {\n    const { onChange } = this.props;\n\n    let value = event.target.value;\n\n    // Convert back from an empty string to `undefined`\n    if (value === Empty_value_option_value) {\n      // `null` is not accounted for, use `undefined` instead.\n      value = undefined;\n    }\n\n    onChange(value);\n  };\n\n  resize_native_expanded_select = () => {\n    // For some strange reason 1px on the right side of the `<select/>`\n    // still falls through to the underlying selected option label.\n    ReactDOM.findDOMNode(this.native).style.width =\n      ReactDOM.findDOMNode(this.selected).offsetWidth + 1 + 'px';\n  };\n\n  get_selected_option() {\n    const { value } = this.props;\n\n    return this.get_option(value);\n  }\n\n  get_option(value) {\n    const { options, children } = this.props;\n\n    if (options) {\n      return options.filter(x => x.value === value)[0];\n    }\n\n    let option;\n\n    React.Children.forEach(children, function(child) {\n      if (child.props.value === value) {\n        option = child;\n      }\n    });\n\n    return option;\n  }\n\n  get_option_index(option) {\n    const { options, children } = this.props;\n\n    if (options) {\n      return options.indexOf(option);\n    }\n\n    let option_index;\n\n    React.Children.forEach(children, function(child, index) {\n      if (child.props.value === option.value) {\n        option_index = index;\n      }\n    });\n\n    return option_index;\n  }\n\n  get_selected_option_label() {\n    const { options } = this.props;\n\n    const selected = this.get_selected_option();\n\n    if (!selected) {\n      return;\n    }\n\n    if (options) {\n      return selected.label;\n    }\n\n    return selected.props.label;\n  }\n\n  overflown() {\n    const { options, maxItems } = this.props;\n\n    return options.length > maxItems;\n  }\n\n  scrollable_list_height(state = this.state) {\n    const { maxItems } = this.props;\n\n    // (Adding vertical padding so that it shows these `maxItems` options fully)\n    return (\n      (state.height - 2 * state.vertical_padding) *\n        (maxItems / this.get_options().length) +\n      state.vertical_padding\n    );\n  }\n\n  should_animate() {\n    return true;\n\n    // return this.props.options.length >= this.props.transition_item_count_min\n  }\n\n  focus() {\n    if (this.autocomplete) {\n      this.autocomplete.focus();\n    } else {\n      this.selected.focus();\n    }\n  }\n\n  toggle = (event, toggle_options = {}) => {\n    if (event) {\n      // Don't navigate away when clicking links\n      event.preventDefault();\n\n      // Not discarding the click event because\n      // other expanded selects may be listening to it.\n      // // Discard the click event so that it won't reach `document` click listener\n      // event.stopPropagation() // doesn't work\n      // event.nativeEvent.stopImmediatePropagation()\n    }\n\n    const {\n      menu,\n      disabled,\n      autocomplete,\n      options,\n      value,\n      focusUponSelection,\n      onToggle,\n      nativeExpanded,\n      automaticallyScrollIntoView,\n    } = this.props;\n\n    if (nativeExpanded) {\n      return;\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    const { expanded } = this.state;\n\n    if (!expanded && autocomplete) {\n      this.setState({\n        // The input value can't be `undefined`\n        // because in that case React would complain\n        // about it being an \"uncontrolled input\"\n        autocomplete_input_value: '',\n        matching_options: options,\n      });\n\n      // if (!this.state.autocomplete_width)\n      // {\n      // \tthis.setState({ autocomplete_width: this.get_widest_label_width() })\n      // }\n    }\n\n    // Deferring expanding the select upon click\n    // because document.onClick should finish first,\n    // otherwise `event.target` may be detached from the DOM\n    // and it would immediately toggle back to collapsed state.\n    clearTimeout(this.timeouts.expander);\n    clearTimeout(this.timeouts.focusOnSelect);\n    clearTimeout(this.timeouts.scrollIntoView);\n    this.timeouts.expander = setTimeout(() => {\n      delete this.timeouts.expander;\n      this.setState({\n        expanded: !expanded,\n      });\n\n      if (!expanded && options) {\n        // Focus either the selected option\n        // or the first option in the list.\n\n        const focused_option_value = value || options[0].value;\n\n        this.setState({ focused_option_value });\n\n        // Scroll down to the focused option\n        this.scroll_to(focused_option_value);\n      }\n\n      // If it's autocomplete, then focus <input/> field\n      // upon toggling the select component.\n\n      if (!toggle_options.dont_focus_after_toggle) {\n        if (autocomplete) {\n          if (!expanded || (expanded && focusUponSelection)) {\n            this.timeouts.focusOnSelect = setTimeout(() => {\n              delete this.timeouts.focusOnSelect;\n              // Focus the toggler\n              if (expanded) {\n                this.selected.focus();\n              } else {\n                this.autocomplete.focus();\n              }\n            }, 0);\n          }\n        } else {\n          // For some reason Firefox loses focus\n          // upon select expansion via a click,\n          // so this extra `.focus()` works around that issue.\n          if (!menu) {\n            this.selected.focus();\n          }\n        }\n      }\n\n      if (!expanded && automaticallyScrollIntoView && this.list) {\n        this.timeouts.scrollIntoView = setTimeout(() => {\n          if (this.list.scrollIntoViewIfNeeded) {\n            this.list.scrollIntoViewIfNeeded();\n          } else if (this.list.scrollIntoView) {\n            this.list.scrollIntoView();\n          }\n          delete this.timeouts.scrollIntoView;\n        }, 100);\n      }\n\n      if (onToggle) {\n        onToggle(!expanded);\n      }\n\n      if (toggle_options.callback) {\n        toggle_options.callback();\n      }\n    }, 0);\n  };\n\n  item_clicked(value, event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n\n    this.toggle(undefined, { callback: () => onChange(value) });\n  }\n\n  document_clicked = event => {\n    const autocomplete = ReactDOM.findDOMNode(this.autocomplete);\n    const selected_option = ReactDOM.findDOMNode(this.selected);\n    const options_list = ReactDOM.findDOMNode(this.list);\n\n    // Don't close the select if its expander button has been clicked,\n    // or if autocomplete has been clicked,\n    // or if an option was selected from the list.\n    if (\n      (options_list && options_list.contains(event.target)) ||\n      (autocomplete && autocomplete.contains(event.target)) ||\n      (selected_option && selected_option.contains(event.target))\n    ) {\n      return;\n    }\n\n    this.setState({ expanded: false });\n\n    const { onToggle } = this.props;\n\n    if (onToggle) {\n      onToggle(false);\n    }\n  };\n\n  // Would have used `onBlur={...}` event handler here\n  // with `if (container.contains(event.relatedTarget))` condition,\n  // but it doesn't work in IE in React.\n  // https://github.com/facebook/react/issues/3751\n  //\n  // Therefore, using the hacky `document.onClick` handlers\n  // and this `onKeyDown` Tab handler\n  // until `event.relatedTarget` support is consistent in React.\n  //\n  on_key_down_in_container = event => {\n    if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n      return;\n    }\n\n    const { expanded } = this.state;\n\n    switch (event.keyCode) {\n      // Toggle on Tab out\n      case 9:\n        if (expanded) {\n          this.toggle(undefined, { dont_focus_after_toggle: true });\n\n          const { onTabOut } = this.props;\n\n          if (onTabOut) {\n            onTabOut(event);\n          }\n        }\n        return;\n    }\n  };\n\n  on_key_down = event => {\n    if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n      return;\n    }\n\n    const { options, value, autocomplete } = this.props;\n    const { expanded, focused_option_value } = this.state;\n\n    // Maybe add support for `children` arrow navigation in future\n    if (options) {\n      switch (event.keyCode) {\n        // Select the previous option (if present) on up arrow\n        case 38:\n          event.preventDefault();\n\n          const previous = this.previous_focusable_option();\n\n          if (previous) {\n            this.show_option(previous.value, 'top');\n            return this.setState({ focused_option_value: previous.value });\n          }\n\n          return;\n\n        // Select the next option (if present) on down arrow\n        case 40:\n          event.preventDefault();\n\n          const next = this.next_focusable_option();\n\n          if (next) {\n            this.show_option(next.value, 'bottom');\n            return this.setState({ focused_option_value: next.value });\n          }\n\n          return;\n\n        // Collapse on Escape\n        //\n        // Maybe add this kind of support for \"Escape\" key in some future:\n        //  hiding the item list, cancelling current item selection process\n        //  and restoring the selection present before the item list was toggled.\n        //\n        case 27:\n          // Collapse the list if it's expanded\n          if (this.state.expanded) {\n            this.toggle();\n\n            // Restore focus when the list is collapsed\n            this.timeouts.focusOnCollapse = setTimeout(() => {\n              this.selected.focus();\n              delete this.timeouts.focusOnCollapse;\n            }, 0);\n          }\n\n          return;\n\n        // on Enter\n        case 13:\n          // Choose the focused item on Enter\n          if (expanded) {\n            event.preventDefault();\n\n            // If an item is focused\n            // (which may not be a case\n            //  when autocomplete is matching no items)\n            // (still for non-autocomplete select\n            //  it is valid to have a default option)\n            if (this.get_options() && this.get_options().length > 0) {\n              // Choose the focused item\n              this.item_clicked(focused_option_value);\n              // And collapse the select\n              this.toggle();\n            }\n          } else {\n            // Else it should have just submitted the form on Enter,\n            // but it wouldn't because the select element activator is a <button/>\n            // therefore hitting Enter while being focused on it just pushes that button.\n            // So submit the enclosing form manually.\n            if (submit_parent_form(ReactDOM.findDOMNode(this.select))) {\n              event.preventDefault();\n            }\n          }\n\n          return;\n\n        // on Spacebar\n        case 32:\n          // Choose the focused item on Enter\n          if (expanded) {\n            // only if it it's an `options` select\n            // and also if it's not an autocomplete\n            if (this.get_options() && !autocomplete) {\n              event.preventDefault();\n\n              // `focused_option_value` could be non-existent\n              // in case of `autocomplete`, but since\n              // we're explicitly not handling autocomplete here\n              // it is valid to select any options including the default ones.\n              this.item_clicked(focused_option_value);\n              this.toggle();\n            }\n          }\n          // Otherwise, the spacebar keydown event on a `<button/>`\n          // will trigger `onClick` and `.toggle()` will be called.\n\n          return;\n      }\n    }\n  };\n\n  // This handler is a workaround for `redux-form`\n  on_blur = event => {\n    const { onBlur, value } = this.props;\n\n    // This `onBlur` interceptor is a workaround for `redux-form`,\n    // so that it gets the right (parsed, not the formatted one)\n    // `event.target.value` in its `onBlur` handler.\n    if (onBlur) {\n      const _event = {\n        ...event,\n        target: {\n          ...event.target,\n          value,\n        },\n      };\n\n      // For `redux-form` event detection.\n      // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n      _event.stopPropagation = event.stopPropagation;\n      _event.preventDefault = event.preventDefault;\n\n      onBlur(_event);\n    }\n  };\n\n  get_options() {\n    const { autocomplete, autocompleteShowAll, maxItems, options } = this.props;\n    const { matching_options } = this.state;\n\n    if (!autocomplete) {\n      return options;\n    }\n\n    if (autocompleteShowAll) {\n      return matching_options;\n    }\n\n    return matching_options.slice(0, maxItems);\n  }\n\n  // Get the previous option (relative to the currently focused option)\n  previous_focusable_option() {\n    const options = this.get_options();\n    const { focused_option_value } = this.state;\n\n    let i = 0;\n    while (i < options.length) {\n      if (options[i].value === focused_option_value) {\n        if (i - 1 >= 0) {\n          return options[i - 1];\n        }\n      }\n      i++;\n    }\n  }\n\n  // Get the next option (relative to the currently focused option)\n  next_focusable_option() {\n    const options = this.get_options();\n    const { focused_option_value } = this.state;\n\n    let i = 0;\n    while (i < options.length) {\n      if (options[i].value === focused_option_value) {\n        if (i + 1 < options.length) {\n          return options[i + 1];\n        }\n      }\n      i++;\n    }\n  }\n\n  // Scrolls to an option having the value\n  scroll_to(value) {\n    const { vertical_padding } = this.state;\n\n    const option_element = ReactDOM.findDOMNode(\n      this.options[get_option_key(value)],\n    );\n    const list = ReactDOM.findDOMNode(this.list);\n\n    // If this option isn't even shown\n    // (e.g. autocomplete)\n    // then don't scroll to it because there's nothing to scroll to.\n    if (!option_element) {\n      return;\n    }\n\n    let offset_top = option_element.offsetTop;\n\n    const is_first_option = list.firstChild === option_element;\n\n    // If it's the first one - then scroll to list top\n    if (is_first_option) {\n      offset_top -= vertical_padding;\n    }\n\n    list.scrollTop = offset_top;\n  }\n\n  // Fully shows an option having the `value` (scrolls to it if neccessary)\n  show_option(value, gravity) {\n    const { vertical_padding } = this.state;\n\n    const option_element = ReactDOM.findDOMNode(\n      this.options[get_option_key(value)],\n    );\n    const list = ReactDOM.findDOMNode(this.list);\n\n    const is_first_option = list.firstChild === option_element;\n    const is_last_option = list.lastChild === option_element;\n\n    switch (gravity) {\n      case 'top':\n        let top_line = option_element.offsetTop;\n\n        if (is_first_option) {\n          top_line -= vertical_padding;\n        }\n\n        if (top_line < list.scrollTop) {\n          list.scrollTop = top_line;\n        }\n\n        return;\n\n      case 'bottom':\n        let bottom_line =\n          option_element.offsetTop + option_element.offsetHeight;\n\n        if (is_last_option) {\n          bottom_line += vertical_padding;\n        }\n\n        if (bottom_line > list.scrollTop + list.offsetHeight) {\n          list.scrollTop = bottom_line - list.offsetHeight;\n        }\n\n        return;\n    }\n  }\n\n  // Calculates height of the expanded item list\n  calculate_height() {\n    const { options } = this.props;\n\n    const list_dom_node = ReactDOM.findDOMNode(this.list);\n    const border = parseInt(\n      window.getComputedStyle(list_dom_node).borderTopWidth,\n    );\n    const height = list_dom_node.scrollHeight;\n\n    const vertical_padding = parseInt(\n      window.getComputedStyle(list_dom_node).paddingTop,\n    );\n\n    // For things like \"accordeon\".\n    //\n    // const images = list_dom_node.querySelectorAll('img')\n    //\n    // if (images.length > 0)\n    // {\n    // \treturn this.preload_images(list_dom_node, images)\n    // }\n\n    const state = { height, vertical_padding, border };\n\n    if (this.is_scrollable() && options && this.overflown()) {\n      state.list_height = this.scrollable_list_height(state);\n    }\n\n    this.setState(state);\n  }\n\n  is_scrollable() {\n    const { menu, autocomplete, autocompleteShowAll, scroll } = this.props;\n\n    return (\n      !menu &&\n      ((autocomplete && autocompleteShowAll) || !autocomplete) &&\n      scroll\n    );\n  }\n\n  // This turned out not to work for `autocomplete`\n  // because not all options are ever shown.\n  // get_widest_label_width()\n  // {\n  // \t// <ul/> -> <li/> -> <button/>\n  // \tconst label = ReactDOM.findDOMNode(this.list).firstChild.firstChild\n  //\n  // \tconst style = getComputedStyle(label)\n  //\n  // \tconst width = parseFloat(style.width)\n  // \tconst side_padding = parseFloat(style.paddingLeft)\n  //\n  // \treturn width - 2 * side_padding\n  // }\n\n  get_matching_options(options, value) {\n    // If the autocomplete value is `undefined` or empty\n    if (!value) {\n      return options;\n    }\n\n    value = value.toLowerCase();\n\n    return options.filter(({ label, verbose }) => {\n      return (verbose || label).toLowerCase().indexOf(value) >= 0;\n    });\n  }\n\n  on_autocomplete_input_change = event => {\n    const { options } = this.props;\n    const input = event.target.value;\n    const matching_options = this.get_matching_options(options, input);\n\n    this.setState({\n      autocomplete_input_value: input,\n      matching_options,\n      focused_option_value:\n        matching_options.length > 0 ? matching_options[0].value : undefined,\n    });\n  };\n\n  // // https://github.com/daviferreira/react-sanfona/blob/master/src/AccordionItem/index.jsx#L54\n  // // Wait for images to load before calculating maxHeight\n  // preload_images(node, images)\n  // {\n  // \tlet images_loaded = 0\n  //\n  // \tconst image_loaded = () =>\n  // \t{\n  // \t\timages_loaded++\n  //\n  // \t\tif (images_loaded === images.length)\n  // \t\t{\n  // \t\t\tthis.setState\n  // \t\t\t({\n  // \t\t\t\theight: this.props.expanded ? node.scrollHeight : 0\n  // \t\t\t})\n  // \t\t}\n  // \t}\n  //\n  // \tfor (let i = 0; i < images.length; i += 1)\n  // \t{\n  // \t\tconst image = new Image()\n  // \t\timage.src = images[i].src\n  // \t\timage.onload = image.onerror = image_loaded\n  // \t}\n  // }\n}\n\nSelect.Separator = function(props) {\n  return <div className=\"rrui__select__separator\" />;\n};\n\nconst native_expanded_select_container_style = {\n  display: 'inline-block',\n};\n\n// There can be an `undefined` value,\n// so just `{ value }` won't do here.\nfunction get_option_key(value) {\n  return value_is_empty(value) ? '@@rrui/select/undefined' : value;\n}\n\nfunction value_is_empty(value) {\n  return value === null || value === undefined;\n}\n"]}