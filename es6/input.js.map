{"version":3,"sources":["../source/input.js"],"names":["React","Component","PropTypes","ReactDOM","as_you_type","parse","format","getPhoneCode","ReactInput","classNames","Select","country_names","International_icon","all_countries","default_dictionary","International","item","code","name","push","toUpperCase","Input","props","countries","value","dictionary","international","internationalIcon","flags","country","normalize_country_code","should_add_international_option","state","country_code","value_property","get_input_value_depending_on_the_country_selected","select_options","using_custom_country_names","label","icon","get_country_option_icon","String","prototype","localeCompare","sort","a","b","unshift","undefined","metadata","convertToNational","parsed","phone","text","slice","onCountryChange","setState","length","new_props","new_country","indexOf","set_country","saveOnIcons","showCountrySelect","nativeExpanded","disabled","autoComplete","selectTabIndex","selectMaxItems","inputTabIndex","style","className","inputClassName","flagsPath","automaticallyScrollIntoView","onDropdown","input_props","country_select_is_shown","markup","can_change_country","select","ref","country_select_toggled","on_country_select_tab_out","input","on_change","on_key_down","propTypes","string","onChange","func","isRequired","bool","onBlur","onKeyDown","objectOf","arrayOf","oneOfType","element","number","object","shape","defaultProps","focus","previous_country_code","set_country_code_value","national_number","parse_partial_number","setTimeout","character","could_phone_number_belong_to_country","formatter","template","findDOMNode","event","keyCode","toggle","changed_country","e164","is_shown","preventDefault","partial_national_number","toLowerCase","properties","phone_number","phone_number_digits","country_phone_code_to_countries","country_phone_code","possible_country_phone_code","substring","Error"],"mappings":"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","file":"input.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { as_you_type, parse, format, getPhoneCode } from 'libphonenumber-js';\nimport { ReactInput } from 'input-format';\nimport classNames from 'classnames';\n\n// Not importing here directly from `react-responsive-ui` npm package\n// just to reduce the overall bundle size.\nimport { Select } from './react-responsive-ui';\n\nimport country_names from './country names.json';\nimport International_icon from './international icon';\n\n// A list of all country codes\nconst all_countries = [];\n\n// Country code to country name map\nconst default_dictionary = {\n  International: 'International',\n};\n\n// Populate `all_countries` and `default_dictionary`\nfor (const item of country_names) {\n  const [code, name] = item;\n\n  all_countries.push(code.toUpperCase());\n  default_dictionary[code.toUpperCase()] = name;\n}\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nexport default class Input extends Component {\n  static propTypes = {\n    // Phone number `value`.\n    // Is a plaintext international phone number\n    // (e.g. \"+12223333333\" for USA)\n    value: PropTypes.string,\n\n    // This handler is called each time\n    // the phone number <input/> changes its textual value.\n    onChange: PropTypes.func.isRequired,\n\n    // This handler is called when the dropdown\n    // toggles if provided.  It includes the ref\n    // to it's container.\n    onDropdown: PropTypes.func,\n\n    // will attempt to scroll the dropdown list into\n    // the view when it is opened\n    automaticallyScrollIntoView: PropTypes.bool,\n\n    // This `onBlur` interceptor is a workaround for `redux-form`,\n    // so that it gets a parsed `value` in its `onBlur` handler,\n    // not the formatted one.\n    // (`redux-form` passed `onBlur` to this component\n    //  and this component intercepts that `onBlur`\n    //  to make sure it works correctly with `redux-form`)\n    onBlur: PropTypes.func,\n\n    // Set `onKeyDown` handler.\n    // Can be used in special cases to handle e.g. enter pressed\n    onKeyDown: PropTypes.func,\n\n    // Disables both the <input/> and the <select/>\n    // (is `false` by default)\n    disabled: PropTypes.bool.isRequired,\n\n    // Remembers the input and also autofills it\n    // with a previously remembered phone number.\n    // Default value: \"tel\".\n    //\n    // https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n    //\n    // \"So when should you use autocomplete=\"off\"?\n    //  One example is when you've implemented your own version\n    //  of autocomplete for search. Another example is any form field\n    //  where users will input and submit different kinds of information\n    //  where it would not be useful to have the browser remember\n    //  what was submitted previously\".\n    //\n    autoComplete: PropTypes.string.isRequired,\n\n    // Two-letter country code\n    // to be used as the default country\n    // for local (non-international) phone numbers.\n    country: PropTypes.string,\n\n    // Is called when the selected country changes\n    // (either by a user manually, or by autoparsing\n    //  an international phone number being input).\n    // This handler does not need to update the `country` property.\n    // It's simply a listener for those who might need that for whatever purpose.\n    onCountryChange: PropTypes.func,\n\n    // Localization dictionary:\n    // `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n    dictionary: PropTypes.objectOf(PropTypes.string),\n\n    // An optional list of allowed countries\n    countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    // Custom national flag icons\n    flags: PropTypes.oneOfType([\n      PropTypes.objectOf(PropTypes.element),\n      PropTypes.bool,\n    ]),\n\n    // A base URL path for national flag SVG icons.\n    // By default it uses the ones from `flag-icon-css` github repo.\n    flagsPath: PropTypes.string.isRequired,\n\n    // Whether to use native `<select/>` when expanded\n    nativeExpanded: PropTypes.bool.isRequired,\n\n    // If set to `false`, then country flags will be shown\n    // for all countries in the options list\n    // (not just for selected country).\n    saveOnIcons: PropTypes.bool.isRequired,\n\n    // Whether to show country `<Select/>`\n    // (is `true` by default)\n    showCountrySelect: PropTypes.bool.isRequired,\n\n    // Whether to add the \"International\" option\n    // to the list of countries.\n    international: PropTypes.bool,\n\n    // Custom \"International\" phone number type icon.\n    internationalIcon: PropTypes.element.isRequired,\n\n    // Should the initially passed phone number `value`\n    // be converted to a national phone number for its country.\n    // (is `true` by default)\n    convertToNational: PropTypes.bool.isRequired,\n\n    // HTML `tabindex` attribute for the country select\n    selectTabIndex: PropTypes.number,\n\n    // Defines the height of the dropdown country select list\n    selectMaxItems: PropTypes.number,\n\n    // HTML `tabindex` attribute for the phone number input\n    inputTabIndex: PropTypes.number,\n\n    // CSS style object\n    style: PropTypes.object,\n\n    // Component CSS class\n    className: PropTypes.string,\n\n    // `<input/>` CSS class\n    inputClassName: PropTypes.string,\n\n    // `libphonenumber-js` metadata\n    metadata: PropTypes.shape({\n      countries: PropTypes.object.isRequired,\n    }).isRequired,\n  };\n\n  static defaultProps = {\n    // Is enabled\n    disabled: false,\n\n    // Remember (and autofill) as a phone number\n    autoComplete: 'tel',\n\n    // Include all countries by default\n    countries: all_countries,\n\n    // By default use the ones from `flag-icon-css` github repo.\n    flagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n    // Default international icon (globe)\n    internationalIcon: (\n      <div className=\"react-phone-number-input__icon react-phone-number-input__icon--international\">\n        <International_icon />\n      </div>\n    ),\n\n    onDropdown: undefined,\n\n    automaticallyScrollIntoView: false,\n\n    // Custom country names\n    dictionary: {},\n\n    // Whether to use native `<select/>` when expanded\n    nativeExpanded: false,\n\n    // Don't show flags for all countries in the options list\n    // (show it just for selected country).\n    // (to save user's traffic because all flags are about 3 MegaBytes)\n    saveOnIcons: true,\n\n    // Show country `<Select/>` by default\n    showCountrySelect: true,\n\n    // Convert the initially passed phone number `value`\n    // to a national phone number for its country.\n    convertToNational: true,\n  };\n\n  state = {};\n\n  constructor(props) {\n    super(props);\n\n    const {\n      countries,\n      value,\n      dictionary,\n      international,\n      internationalIcon,\n      flags,\n    } = this.props;\n\n    let { country } = this.props;\n\n    // Normalize `country` code\n    country = normalize_country_code(country);\n\n    // Autodetect country if value is set\n    // and is international (which it should be)\n    if (!country && value && value[0] === '+') {\n      // Will be left `undefined` in case of non-detection\n      country = parse(value).country;\n    }\n\n    // If there will be no \"International\" option\n    // then a `country` must be selected.\n    if (!should_add_international_option(this.props) && !country) {\n      country = countries[0];\n    }\n\n    // Set the currently selected country\n    this.state.country_code = country;\n\n    // If a phone number `value` is passed then format it\n    if (value) {\n      // `this.state.value_property` is the `this.props.value`\n      // which corresponding to `this.state.value`.\n      // It is being compared in `componentWillReceiveProps()`\n      // against `newProps.value` to find out if the new `value` property\n      // needs `this.state.value` recalculation.\n      this.state.value_property = value;\n      // Set the currently entered `value`.\n      // State `value` is either in international plaintext or just plaintext format.\n      // (e.g. `+78005553535`, `1234567`)\n      this.state.value = this.get_input_value_depending_on_the_country_selected(\n        value,\n        country,\n      );\n    }\n\n    // `<Select/>` options\n    this.select_options = [];\n\n    // Whether custom country names are supplied\n    let using_custom_country_names = false;\n\n    // Add a `<Select/>` option for each country\n    for (const country_code of countries) {\n      if (dictionary[country_code]) {\n        using_custom_country_names = true;\n      }\n\n      this.select_options.push({\n        value: country_code,\n        label: dictionary[country_code] || default_dictionary[country_code],\n        icon: get_country_option_icon(country_code, this.props),\n      });\n    }\n\n    // Sort the list of countries alphabetically\n    // (if `String.localeCompare` is available).\n    // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n    // (Which means: IE >= 11, and does not work in Safari as of May 2017)\n    //\n    // This is only done when custom country names\n    // are supplied via `dictionary` property\n    // because by default all country names are already sorted.\n    //\n    if (using_custom_country_names && String.prototype.localeCompare) {\n      this.select_options.sort((a, b) => a.label.localeCompare(b.label));\n    }\n\n    // Add the \"International\" option to the country list (if suitable)\n    if (should_add_international_option(this.props)) {\n      this.select_options.unshift({\n        label:\n          dictionary['International'] || default_dictionary['International'],\n        icon: flags === false ? undefined : internationalIcon,\n      });\n    }\n  }\n\n  // Determines the text `<input/>` `value`\n  // depending on `this.props.value` and the country selected.\n  //\n  // E.g. when a country is selected and `this.props.value`\n  // is in international format for this country\n  // then it can be converted to national format.\n  //\n  // If the country code is specified\n  //   If the value has a leading plus sign\n  //     If it converts into a valid national number for this country\n  //       Then the value is set to be that national number\n  //     Else\n  //       The leading + sign is trimmed\n  //   Else\n  //     The value stays as it is\n  // Else\n  //   If the value has a leading + sign\n  //     The value stays as it is\n  //   Else\n  //     The + sign is prepended\n  //\n  get_input_value_depending_on_the_country_selected(value, country_code) {\n    const { metadata, convertToNational } = this.props;\n\n    if (!value) {\n      return;\n    }\n\n    // If the country code is specified\n    if (country_code) {\n      // If the value has a leading plus sign\n      if (value[0] === '+' && convertToNational) {\n        // If it's a fully-entered phone number\n        // that converts into a valid national number for this country\n        // then the value is set to be that national number.\n\n        const parsed = parse(value, metadata);\n\n        if (parsed.country === country_code) {\n          return this.format(parsed.phone, country_code).text;\n        }\n\n        // Else the leading + sign is trimmed.\n        return value.slice(1);\n      }\n\n      // Else the value stays as it is\n      return value;\n    }\n\n    // The country is not set.\n    // Assuming that's an international phone number.\n\n    // If the value has a leading + sign\n    if (value[0] === '+') {\n      // The value is correct\n      return value;\n    }\n\n    // The + sign is prepended\n    return '+' + value;\n  }\n\n  set_country_code_value(country_code) {\n    const { onCountryChange } = this.props;\n\n    if (onCountryChange) {\n      onCountryChange(country_code);\n    }\n\n    this.setState({ country_code });\n  }\n\n  // `<select/>` `onChange` handler\n  set_country = (country_code, focus) => {\n    const { metadata } = this.props;\n\n    // Previously selected country\n    const previous_country_code = this.state.country_code;\n\n    this.set_country_code_value(country_code);\n\n    // Adjust the phone number (`value`)\n    // according to the selected `country_code`\n\n    let { value } = this.state;\n\n    // If switching to a country from International\n    //   If the international number belongs to this country\n    //     Convert it to a national number\n    //   Else\n    //     Trim the leading + sign\n    //\n    // If switching to a country from a country\n    //   If the value has a leading + sign\n    //     If the international number belongs to this country\n    //       Convert it to a national number\n    //     Else\n    //       Trim the leading + sign\n    //   Else\n    //     The value stays as it is\n    //\n    // If switching to International from a country\n    //   If the value has a leading + sign\n    //     The value stays as it is\n    //   Else\n    //     Take the international plaintext value\n\n    if (value) {\n      // If switching to a country from International\n      if (!previous_country_code && country_code) {\n        // The value is international plaintext\n        const parsed = parse(value, metadata);\n\n        // If it's for this country,\n        // then convert it to a national number\n        if (parsed.country === country_code) {\n          value = this.format(parsed.phone, country_code).text;\n        } else {\n          // Else just trim the + sign\n          value = value.slice(1);\n        }\n      }\n\n      if (previous_country_code && country_code) {\n        if (value[0] === '+') {\n          const parsed = parse(value, metadata);\n\n          if (parsed.country === country_code) {\n            value = this.format(parsed.phone, country_code).text;\n          } else {\n            value = value.slice(1);\n          }\n        }\n      }\n\n      // If switching to International from a country\n      if (previous_country_code && !country_code) {\n        // If no leading + sign\n        if (value[0] !== '+') {\n          // Take the international plaintext value\n          const national_number = parse_partial_number(\n            value,\n            previous_country_code,\n            metadata,\n          ).national_number;\n          value = format(\n            national_number,\n            previous_country_code,\n            'International_plaintext',\n            metadata,\n          );\n        }\n      }\n\n      // Update the adjusted `value`\n      // and update `this.props.value` (in e.164 phone number format)\n      // according to the new `this.state.value`.\n      // (keep them in sync)\n      this.on_change(value, country_code, true);\n    }\n\n    // Focus the phone number input upon country selection\n    // (do it in a timeout because the `<input/>`\n    //  is hidden while selecting a country)\n    if (focus !== false) {\n      setTimeout(this.focus, 0);\n    }\n  };\n\n  // `input-format` `parse` character function\n  // https://github.com/halt-hammerzeit/input-format\n  parse = (character, value) => {\n    const { countries } = this.props;\n\n    if (character === '+') {\n      // Only allow a leading `+`\n      if (!value) {\n        // If the \"International\" option is available\n        // then allow the leading `+` because it's meant to be this way.\n        //\n        // Otherwise, the leading `+` will either erase all subsequent digits\n        // (if they're not appropriate for the selected country)\n        // or the subsequent digits (if any) will join the `+`\n        // forming an international phone number. Because a user\n        // might be comfortable with entering an international phone number\n        // (i.e. with country code) rather than the local one.\n        // Therefore such possibility is given.\n        //\n        return character;\n      }\n    } else if (character >= '0' && character <= '9') {\n      // For digits\n      const { metadata } = this.props;\n      const { country_code } = this.state;\n\n      // If the \"International\" option is not available\n      // and if the value has a leading `+`\n      // then it means that the phone number being entered\n      // is an international one, so only allow the country phone code\n      // for the selected country to be entered.\n\n      if (\n        !should_add_international_option(this.props) &&\n        value &&\n        value[0] === '+'\n      ) {\n        if (\n          !could_phone_number_belong_to_country(\n            value + character,\n            country_code,\n            metadata,\n          )\n        ) {\n          return;\n        }\n      }\n\n      return character;\n    }\n  };\n\n  // `input-format` `format` function\n  // https://github.com/halt-hammerzeit/input-format\n  format = (value, country_code = this.state.country_code) => {\n    const { metadata } = this.props;\n\n    // `value` is already parsed input, i.e.\n    // either International plaintext phone number\n    // or just local phone number digits.\n\n    // \"As you type\" formatter\n    const formatter = new as_you_type(country_code, metadata);\n\n    // Is used to check if a country code can already be derived\n    this.formatter = formatter;\n\n    // Format phone number\n    const text = formatter.input(value);\n\n    return { text, template: formatter.template };\n  };\n\n  // Can be called externally\n  focus = () => {\n    ReactDOM.findDOMNode(this.input).focus();\n  };\n\n  // `<input/>` `onKeyDown` handler\n  on_key_down = event => {\n    const { onKeyDown } = this.props;\n\n    // Expand country `<select/>`` on \"Down arrow\" key press\n    if (event.keyCode === 40) {\n      this.select.toggle();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  // `<input/>` `onChange` handler.\n  // Updates `this.props.value` (in e.164 phone number format)\n  // according to the new `this.state.value`.\n  // (keeps them in sync)\n  on_change = (\n    value,\n    country_code = this.state.country_code,\n    changed_country = false,\n  ) => {\n    const { metadata, onChange } = this.props;\n\n    // If the `<input/>` is empty then just exit\n    if (!value) {\n      return this.setState(\n        {\n          // State `value` is the parsed input value\n          // (e.g. `+78005553535`, `1234567`).\n          value,\n          // `this.state.value_property` is the `this.props.value`\n          // which corresponding to `this.state.value`.\n          // It is being compared in `componentWillReceiveProps()`\n          // against `newProps.value` to find out if the new `value` property\n          // needs `this.state.value` recalculation.\n          value_property: value,\n        },\n        // Write the new `this.props.value`.\n        () => onChange(value),\n      );\n    }\n\n    // For international phone numbers\n    if (value[0] === '+') {\n      // If an international phone number is being erased up to the first `+` sign\n      // or if an international phone number is just starting (with a `+` sign)\n      // then unset the current country because it's clear that a user intends to change it.\n      if (value.length === 1) {\n        // If \"International\" country option has not been disabled\n        // then reset the currently selected country.\n        if (should_add_international_option(this.props)) {\n          country_code = undefined;\n          this.set_country_code_value(country_code);\n        }\n      } else if (\n        !changed_country &&\n        this.formatter.country &&\n        this.formatter.country !== '001'\n      ) {\n        // If a phone number is being input as an international one\n        // and the country code can already be derived,\n        // then switch the country.\n        // (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n        country_code = this.formatter.country;\n        this.set_country_code_value(country_code);\n      }\n    } else if (!country_code) {\n      // If \"International\" mode is selected\n      // and the `value` doesn't start with a + sign,\n      // then prepend it to the `value`.\n      value = '+' + value;\n    }\n\n    // `this.state.value_property` is the `this.props.value`\n    // which corresponding to `this.state.value`.\n    // It is being compared in `componentWillReceiveProps()`\n    // against `newProps.value` to find out if the new `value` property\n    // needs `this.state.value` recalculation.\n    let value_property;\n\n    // `value` equal to `+` makes no sense\n    if (value === '+') {\n      value_property = undefined;\n    } else if (\n      country_code &&\n      value[0] === '+' &&\n      !(\n        value.indexOf(`+${getPhoneCode(country_code)}`) === 0 &&\n        value.length > `+${getPhoneCode(country_code)}`.length\n      )\n    ) {\n      // If a phone number is in international format then check\n      // that the phone number entered belongs to the selected country.\n      value_property = undefined;\n    } else {\n      // Should be a most-probably-valid phone number\n      // Convert `value` to E.164 phone number format\n      value_property = e164(value, country_code, metadata);\n    }\n\n    this.setState(\n      {\n        // State `value` is the parsed input value\n        // (e.g. `+78005553535`, `1234567`).\n        value,\n        // `this.state.value_property` is the `this.props.value`\n        // which corresponding to `this.state.value`.\n        // It is being compared in `componentWillReceiveProps()`\n        // against `newProps.value` to find out if the new `value` property\n        // needs `this.state.value` recalculation.\n        value_property,\n      },\n      // Write the new `this.props.value`.\n      () => onChange(value_property),\n    );\n  };\n\n  // When country `<select/>` is toggled\n  country_select_toggled = is_shown => {\n    if (this.props.onDropdown) {\n      this.props.onDropdown(is_shown, this.select);\n    }\n    this.setState({ country_select_is_shown: is_shown });\n  };\n\n  // Focuses the `<input/>` field\n  // on tab out of the country `<select/>`\n  on_country_select_tab_out = event => {\n    event.preventDefault();\n\n    // Focus the phone number input upon country selection\n    // (do it in a timeout because the `<input/>`\n    //  is hidden while selecting a country)\n    setTimeout(this.focus, 0);\n  };\n\n  // Can a user change the default country or not.\n  can_change_country() {\n    const { countries } = this.props;\n\n    // If `countries` is empty,\n    // then only \"International\" option is available,\n    // so can't switch it.\n    //\n    // If `countries` is a single allowed country,\n    // then cant's switch it.\n    //\n    return countries.length > 1;\n  }\n\n  // Listen for default country property:\n  // if it is set after the page loads\n  // and the user hasn't selected a country yet\n  // then select the default country.\n  componentWillReceiveProps(new_props) {\n    const { countries, value } = this.props;\n\n    // Normalize `country` codes\n    let country = normalize_country_code(this.props.country);\n    let new_country = normalize_country_code(new_props.country);\n\n    // If the default country changed\n    // (e.g. in case of IP detection)\n    if (new_country !== country) {\n      // If the phone number input field is currently empty\n      // (e.g. not touched yet) then change the selected `country`\n      // to the newly passed one (e.g. as a result of a GeoIP query)\n      if (!value) {\n        // If the passed `country` allowed then update it\n        if (countries.indexOf(new_country) !== -1) {\n          // Set the new `country`\n          this.set_country(new_country, false);\n        }\n      }\n    }\n\n    // This code is executed:\n    // * after `this.props.onChange(value)` is called\n    // * if the `value` was externally set (e.g. cleared)\n    if (new_props.value !== value) {\n      // `this.state.value_property` is the `this.props.value`\n      // which corresponding to `this.state.value`.\n      // It is being compared in `componentWillReceiveProps()`\n      // against `newProps.value` to find out if the new `value` property\n      // needs `this.state.value` recalculation.\n      // This is an optimization, it's like `shouldComponentUpdate()`.\n      // This is supposed to save some CPU cycles, maybe not much, I didn't check.\n      // Or maybe there was some other reason for this I don't remember now.\n      if (new_props.value !== this.state.value_property) {\n        // Update the `value` because it was externally set\n\n        // Country code gets updated too\n        let country_code = this.state.country_code;\n\n        // Autodetect country if `value` is set\n        // and is international (which it should be)\n        if (new_props.value && new_props.value[0] === '+') {\n          // `parse().country` will be `undefined` in case of non-detection\n          country_code = parse(new_props.value).country || country_code;\n        }\n\n        this.setState({\n          country_code,\n          value: this.get_input_value_depending_on_the_country_selected(\n            new_props.value,\n            country_code,\n          ),\n          // `this.state.value_property` is the `this.props.value`\n          // which corresponding to `this.state.value`.\n          // It is being compared in `componentWillReceiveProps()`\n          // against `newProps.value` to find out if the new `value` property\n          // needs `this.state.value` recalculation.\n          value_property: new_props.value,\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      saveOnIcons,\n      showCountrySelect,\n      nativeExpanded,\n      disabled,\n      autoComplete,\n      selectTabIndex,\n      selectMaxItems,\n      inputTabIndex,\n      style,\n      className,\n      inputClassName,\n\n      // Extract `input_props` via \"object rest spread\":\n      dictionary,\n      countries,\n      country,\n      onCountryChange,\n      flags,\n      flagsPath,\n      international,\n      internationalIcon,\n      convertToNational,\n      metadata,\n      automaticallyScrollIntoView,\n      onDropdown,\n      ...input_props\n    } = this.props;\n\n    const { value, country_code, country_select_is_shown } = this.state;\n\n    const markup = (\n      <div\n        style={style}\n        className={classNames('react-phone-number-input', className)}\n      >\n        {showCountrySelect &&\n          this.can_change_country() &&\n          <Select\n            ref={ref => (this.select = ref)}\n            value={country_code}\n            options={this.select_options}\n            onChange={this.set_country}\n            disabled={disabled}\n            onToggle={this.country_select_toggled}\n            onTabOut={this.on_country_select_tab_out}\n            nativeExpanded={nativeExpanded}\n            autocomplete\n            autocompleteShowAll\n            maxItems={selectMaxItems}\n            concise\n            tabIndex={selectTabIndex}\n            focusUponSelection={false}\n            saveOnIcons={saveOnIcons}\n            name={input_props.name ? `${input_props.name}__country` : undefined}\n            className=\"react-phone-number-input__country\"\n            inputClassName={inputClassName}\n            automaticallyScrollIntoView\n          />}\n\n        {!country_select_is_shown &&\n          <ReactInput\n            {...input_props}\n            ref={ref => (this.input = ref)}\n            value={value}\n            onChange={this.on_change}\n            disabled={disabled}\n            type=\"tel\"\n            autoComplete={autoComplete}\n            tabIndex={inputTabIndex}\n            parse={this.parse}\n            format={this.format}\n            onKeyDown={this.on_key_down}\n            className={classNames(\n              'rrui__input',\n              'rrui__input-field',\n              'react-phone-number-input__phone',\n              inputClassName,\n            )}\n          />}\n      </div>\n    );\n\n    return markup;\n  }\n}\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\nfunction parse_partial_number(value, country_code, metadata) {\n  // \"As you type\" formatter\n  const formatter = new as_you_type(country_code, metadata);\n\n  // Input partially entered phone number\n  formatter.input(value);\n\n  // Return the parsed partial phone number\n  // (has `.national_number`, `.country`, etc)\n  return formatter;\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata) {\n  // If the phone number is being input in a country-specific format\n  //   If the value has a leading + sign\n  //     The value stays as it is\n  //   Else\n  //     The value is converted to international plaintext\n  // Else, the phone number is being input in an international format\n  //   If the value has a leading + sign\n  //     The value stays as it is\n  //   Else\n  //     The value is prepended with a + sign\n\n  if (country_code) {\n    if (value[0] === '+') {\n      return value;\n    }\n\n    const partial_national_number = parse_partial_number(value, country_code)\n      .national_number;\n    return format(\n      partial_national_number,\n      country_code,\n      'International_plaintext',\n      metadata,\n    );\n  }\n\n  if (value[0] === '+') {\n    return value;\n  }\n\n  return '+' + value;\n}\n\n// Gets country flag element by country code\nfunction get_country_option_icon(country_code, { flags, flagsPath }) {\n  if (flags === false) {\n    return undefined;\n  }\n\n  if (flags && flags[country_code]) {\n    return flags[country_code];\n  }\n\n  return (\n    <img\n      className=\"react-phone-number-input__icon\"\n      src={`${flagsPath}${country_code.toLowerCase()}.svg`}\n    />\n  );\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties) {\n  const { countries, international } = properties;\n\n  // If this behaviour is explicitly set, then do as it says.\n  if (international !== undefined) {\n    return international;\n  }\n\n  // If `countries` is empty,\n  // then only \"International\" option is available, so add it.\n  if (countries.length === 0) {\n    return true;\n  }\n\n  // If `countries` is a single allowed country,\n  // then don't add the \"International\" option\n  // because it would make no sense.\n  if (countries.length === 1) {\n    return false;\n  }\n\n  // Show the \"International\" option by default\n  return true;\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(\n  phone_number,\n  country_code,\n  metadata,\n) {\n  // Strip the leading `+`\n  const phone_number_digits = phone_number.slice(1);\n\n  for (const country_phone_code of Object.keys(\n    metadata.country_phone_code_to_countries,\n  )) {\n    const possible_country_phone_code = phone_number_digits.substring(\n      0,\n      country_phone_code.length,\n    );\n    if (country_phone_code.indexOf(possible_country_phone_code) === 0) {\n      // This country phone code is possible.\n      // Does the given country correspond to this country phone code.\n      if (\n        metadata.country_phone_code_to_countries[country_phone_code].indexOf(\n          country_code,\n        ) >= 0\n      ) {\n        return true;\n      }\n    }\n  }\n}\n\n// Validates country code\nfunction normalize_country_code(country) {\n  // Normalize `country` if it's an empty string\n  if (country === '') {\n    country = undefined;\n  }\n\n  // No country is selected (\"International\")\n  if (country === undefined || country === null) {\n    return country;\n  }\n\n  // Check that `country` code exists\n  if (default_dictionary[country]) {\n    return country;\n  }\n\n  throw new Error(`Unknown country: \"${country}\"`);\n}\n"]}