{"version":3,"sources":["../source/country.js"],"names":["country","country_from_locale","country_codes","phone","slice","length","country_code","locale","last_dash_index","lastIndexOf"],"mappings":"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","file":"country.js","sourcesContent":["import { starts_with } from './helpers'\n\n// https://countrycode.org/\n//\n// data.split('\\n').map(row =>\n// {\n// \tconst digit_index = row.search(/\\d/)\n// \tconst country_name = row.slice(0, digit_index).trim()\n//\n// \trow = row.slice(digit_index)\n//\n// \tconst letter_index = row.search(/[A-z]/)\n// \tconst phone_codes = row.slice(0, letter_index).trim()\n// \t\t.split(', ')\n// \t\t.map(code => code.replace(/[^0-9]/g, ''))\n//\n// \trow = row.slice(letter_index)\n//\n// \tconst parts = row.split(/\\s/)\n//\n// \trow =\n// \t{\n// \t\tcountry      : parts[0],\n// \t\tcountry_3    : parts[2],\n// \t\tcodes        : phone_codes,\n// \t\tcountry_name : country_name\n// \t}\n//\n// \treturn row\n// })\n// .reduce((total, row) =>\n// {\n// \treturn total.concat(row.codes.map(code =>\n// \t({\n// \t\tcode,\n// \t\tcountry      : row.country,\n// \t\tcountry_3    : row.country_3,\n// \t\tcountry_name : row.country_name\n// \t})))\n// },\n// [])\n// .sort((a, b) => b.code - a.code)\n// .map(row => `\\t['${row.code}', '${row.country}', '${row.country_3}'], // ${row.country_name}`)\n// .join('\\n')\n//\nexport const country_codes =\n[\n\t['441624', 'IM', 'IMN'], // Isle of Man\n\t['441534', 'JE', 'JEY'], // Jersey\n\t['441481', 'GG', 'GGY'], // Guernsey\n\t['1939', 'PR', 'PRI'], // Puerto Rico\n\t['1876', 'JM', 'JAM'], // Jamaica\n\t['1869', 'KN', 'KNA'], // Saint Kitts and Nevis\n\t['1868', 'TT', 'TTO'], // Trinidad and Tobago\n\t['1849', 'DO', 'DOM'], // Dominican Republic\n\t['1829', 'DO', 'DOM'], // Dominican Republic\n\t['1809', 'DO', 'DOM'], // Dominican Republic\n\t['1787', 'PR', 'PRI'], // Puerto Rico\n\t['1784', 'VC', 'VCT'], // Saint Vincent and the Grenadines\n\t['1767', 'DM', 'DMA'], // Dominica\n\t['1758', 'LC', 'LCA'], // Saint Lucia\n\t['1721', 'SX', 'SXM'], // Sint Maarten\n\t['1684', 'AS', 'ASM'], // American Samoa\n\t['1671', 'GU', 'GUM'], // Guam\n\t['1670', 'MP', 'MNP'], // Northern Mariana Islands\n\t['1664', 'MS', 'MSR'], // Montserrat\n\t['1649', 'TC', 'TCA'], // Turks and Caicos Islands\n\t['1473', 'GD', 'GRD'], // Grenada\n\t['1441', 'BM', 'BMU'], // Bermuda\n\t['1345', 'KY', 'CYM'], // Cayman Islands\n\t['1340', 'VI', 'VIR'], // U.S. Virgin Islands\n\t['1284', 'VG', 'VGB'], // British Virgin Islands\n\t['1268', 'AG', 'ATG'], // Antigua and Barbuda\n\t['1264', 'AI', 'AIA'], // Anguilla\n\t['1246', 'BB', 'BRB'], // Barbados\n\t['1242', 'BS', 'BHS'], // Bahamas\n\t['998', 'UZ', 'UZB'], // Uzbekistan\n\t['996', 'KG', 'KGZ'], // Kyrgyzstan\n\t['995', 'GE', 'GEO'], // Georgia\n\t['994', 'AZ', 'AZE'], // Azerbaijan\n\t['993', 'TM', 'TKM'], // Turkmenistan\n\t['992', 'TJ', 'TJK'], // Tajikistan\n\t['977', 'NP', 'NPL'], // Nepal\n\t['976', 'MN', 'MNG'], // Mongolia\n\t['975', 'BT', 'BTN'], // Bhutan\n\t['974', 'QA', 'QAT'], // Qatar\n\t['973', 'BH', 'BHR'], // Bahrain\n\t['972', 'IL', 'ISR'], // Israel\n\t['971', 'AE', 'ARE'], // United Arab Emirates\n\t['970', 'PS', 'PSE'], // Palestine\n\t['968', 'OM', 'OMN'], // Oman\n\t['967', 'YE', 'YEM'], // Yemen\n\t['966', 'SA', 'SAU'], // Saudi Arabia\n\t['965', 'KW', 'KWT'], // Kuwait\n\t['964', 'IQ', 'IRQ'], // Iraq\n\t['963', 'SY', 'SYR'], // Syria\n\t['962', 'JO', 'JOR'], // Jordan\n\t['961', 'LB', 'LBN'], // Lebanon\n\t['960', 'MV', 'MDV'], // Maldives\n\t['886', 'TW', 'TWN'], // Taiwan\n\t['880', 'BD', 'BGD'], // Bangladesh\n\t['856', 'LA', 'LAO'], // Laos\n\t['855', 'KH', 'KHM'], // Cambodia\n\t['853', 'MO', 'MAC'], // Macau\n\t['852', 'HK', 'HKG'], // Hong Kong\n\t['850', 'KP', 'PRK'], // North Korea\n\t['692', 'MH', 'MHL'], // Marshall Islands\n\t['691', 'FM', 'FSM'], // Micronesia\n\t['690', 'TK', 'TKL'], // Tokelau\n\t['689', 'PF', 'PYF'], // French Polynesia\n\t['688', 'TV', 'TUV'], // Tuvalu\n\t['687', 'NC', 'NCL'], // New Caledonia\n\t['686', 'KI', 'KIR'], // Kiribati\n\t['685', 'WS', 'WSM'], // Samoa\n\t['683', 'NU', 'NIU'], // Niue\n\t['682', 'CK', 'COK'], // Cook Islands\n\t['681', 'WF', 'WLF'], // Wallis and Futuna\n\t['680', 'PW', 'PLW'], // Palau\n\t['679', 'FJ', 'FJI'], // Fiji\n\t['678', 'VU', 'VUT'], // Vanuatu\n\t['677', 'SB', 'SLB'], // Solomon Islands\n\t['676', 'TO', 'TON'], // Tonga\n\t['675', 'PG', 'PNG'], // Papua New Guinea\n\t['674', 'NR', 'NRU'], // Nauru\n\t['673', 'BN', 'BRN'], // Brunei\n\t['672', 'AQ', 'ATA'], // Antarctica\n\t['670', 'TL', 'TLS'], // East Timor\n\t['599', 'CW', 'CUW'], // Curacao\n\t['599', 'AN', 'ANT'], // Netherlands Antilles\n\t['598', 'UY', 'URY'], // Uruguay\n\t['597', 'SR', 'SUR'], // Suriname\n\t['595', 'PY', 'PRY'], // Paraguay\n\t['593', 'EC', 'ECU'], // Ecuador\n\t['592', 'GY', 'GUY'], // Guyana\n\t['591', 'BO', 'BOL'], // Bolivia\n\t['590', 'MF', 'MAF'], // Saint Martin\n\t['590', 'BL', 'BLM'], // Saint Barthelemy\n\t['509', 'HT', 'HTI'], // Haiti\n\t['508', 'PM', 'SPM'], // Saint Pierre and Miquelon\n\t['507', 'PA', 'PAN'], // Panama\n\t['506', 'CR', 'CRI'], // Costa Rica\n\t['505', 'NI', 'NIC'], // Nicaragua\n\t['504', 'HN', 'HND'], // Honduras\n\t['503', 'SV', 'SLV'], // El Salvador\n\t['502', 'GT', 'GTM'], // Guatemala\n\t['501', 'BZ', 'BLZ'], // Belize\n\t['500', 'FK', 'FLK'], // Falkland Islands\n\t['423', 'LI', 'LIE'], // Liechtenstein\n\t['421', 'SK', 'SVK'], // Slovakia\n\t['420', 'CZ', 'CZE'], // Czech Republic\n\t['389', 'MK', 'MKD'], // Macedonia\n\t['387', 'BA', 'BIH'], // Bosnia and Herzegovina\n\t['386', 'SI', 'SVN'], // Slovenia\n\t['385', 'HR', 'HRV'], // Croatia\n\t['383', 'XK', 'XKX'], // Kosovo\n\t['382', 'ME', 'MNE'], // Montenegro\n\t['381', 'RS', 'SRB'], // Serbia\n\t['380', 'UA', 'UKR'], // Ukraine\n\t['379', 'VA', 'VAT'], // Vatican\n\t['378', 'SM', 'SMR'], // San Marino\n\t['377', 'MC', 'MCO'], // Monaco\n\t['376', 'AD', 'AND'], // Andorra\n\t['375', 'BY', 'BLR'], // Belarus\n\t['374', 'AM', 'ARM'], // Armenia\n\t['373', 'MD', 'MDA'], // Moldova\n\t['372', 'EE', 'EST'], // Estonia\n\t['371', 'LV', 'LVA'], // Latvia\n\t['370', 'LT', 'LTU'], // Lithuania\n\t['359', 'BG', 'BGR'], // Bulgaria\n\t['358', 'FI', 'FIN'], // Finland\n\t['357', 'CY', 'CYP'], // Cyprus\n\t['356', 'MT', 'MLT'], // Malta\n\t['355', 'AL', 'ALB'], // Albania\n\t['354', 'IS', 'ISL'], // Iceland\n\t['353', 'IE', 'IRL'], // Ireland\n\t['352', 'LU', 'LUX'], // Luxembourg\n\t['351', 'PT', 'PRT'], // Portugal\n\t['350', 'GI', 'GIB'], // Gibraltar\n\t['299', 'GL', 'GRL'], // Greenland\n\t['298', 'FO', 'FRO'], // Faroe Islands\n\t['297', 'AW', 'ABW'], // Aruba\n\t['291', 'ER', 'ERI'], // Eritrea\n\t['290', 'SH', 'SHN'], // Saint Helena\n\t['269', 'KM', 'COM'], // Comoros\n\t['268', 'SZ', 'SWZ'], // Swaziland\n\t['267', 'BW', 'BWA'], // Botswana\n\t['266', 'LS', 'LSO'], // Lesotho\n\t['265', 'MW', 'MWI'], // Malawi\n\t['264', 'NA', 'NAM'], // Namibia\n\t['263', 'ZW', 'ZWE'], // Zimbabwe\n\t['262', 'RE', 'REU'], // Reunion\n\t['262', 'YT', 'MYT'], // Mayotte\n\t['261', 'MG', 'MDG'], // Madagascar\n\t['260', 'ZM', 'ZMB'], // Zambia\n\t['258', 'MZ', 'MOZ'], // Mozambique\n\t['257', 'BI', 'BDI'], // Burundi\n\t['256', 'UG', 'UGA'], // Uganda\n\t['255', 'TZ', 'TZA'], // Tanzania\n\t['254', 'KE', 'KEN'], // Kenya\n\t['253', 'DJ', 'DJI'], // Djibouti\n\t['252', 'SO', 'SOM'], // Somalia\n\t['251', 'ET', 'ETH'], // Ethiopia\n\t['250', 'RW', 'RWA'], // Rwanda\n\t['249', 'SD', 'SDN'], // Sudan\n\t['248', 'SC', 'SYC'], // Seychelles\n\t['246', 'IO', 'IOT'], // British Indian Ocean Territory\n\t['245', 'GW', 'GNB'], // Guinea-Bissau\n\t['244', 'AO', 'AGO'], // Angola\n\t['243', 'CD', 'COD'], // Democratic Republic of the Congo\n\t['242', 'CG', 'COG'], // Republic of the Congo\n\t['241', 'GA', 'GAB'], // Gabon\n\t['240', 'GQ', 'GNQ'], // Equatorial Guinea\n\t['239', 'ST', 'STP'], // Sao Tome and Principe\n\t['238', 'CV', 'CPV'], // Cape Verde\n\t['237', 'CM', 'CMR'], // Cameroon\n\t['236', 'CF', 'CAF'], // Central African Republic\n\t['235', 'TD', 'TCD'], // Chad\n\t['234', 'NG', 'NGA'], // Nigeria\n\t['233', 'GH', 'GHA'], // Ghana\n\t['232', 'SL', 'SLE'], // Sierra Leone\n\t['231', 'LR', 'LBR'], // Liberia\n\t['230', 'MU', 'MUS'], // Mauritius\n\t['229', 'BJ', 'BEN'], // Benin\n\t['228', 'TG', 'TGO'], // Togo\n\t['227', 'NE', 'NER'], // Niger\n\t['226', 'BF', 'BFA'], // Burkina Faso\n\t['225', 'CI', 'CIV'], // Ivory Coast\n\t['224', 'GN', 'GIN'], // Guinea\n\t['223', 'ML', 'MLI'], // Mali\n\t['222', 'MR', 'MRT'], // Mauritania\n\t['221', 'SN', 'SEN'], // Senegal\n\t['220', 'GM', 'GMB'], // Gambia\n\t['218', 'LY', 'LBY'], // Libya\n\t['216', 'TN', 'TUN'], // Tunisia\n\t['213', 'DZ', 'DZA'], // Algeria\n\t['212', 'MA', 'MAR'], // Morocco\n\t['212', 'EH', 'ESH'], // Western Sahara\n\t['211', 'SS', 'SSD'], // South Sudan\n\t['98', 'IR', 'IRN'], // Iran\n\t['95', 'MM', 'MMR'], // Myanmar\n\t['94', 'LK', 'LKA'], // Sri Lanka\n\t['93', 'AF', 'AFG'], // Afghanistan\n\t['92', 'PK', 'PAK'], // Pakistan\n\t['91', 'IN', 'IND'], // India\n\t['90', 'TR', 'TUR'], // Turkey\n\t['86', 'CN', 'CHN'], // China\n\t['84', 'VN', 'VNM'], // Vietnam\n\t['82', 'KR', 'KOR'], // South Korea\n\t['81', 'JP', 'JPN'], // Japan\n\t['66', 'TH', 'THA'], // Thailand\n\t['65', 'SG', 'SGP'], // Singapore\n\t['64', 'NZ', 'NZL'], // New Zealand\n\t['64', 'PN', 'PCN'], // Pitcairn\n\t['63', 'PH', 'PHL'], // Philippines\n\t['62', 'ID', 'IDN'], // Indonesia\n\t['61', 'CX', 'CXR'], // Christmas Island\n\t['61', 'CC', 'CCK'], // Cocos Islands\n\t['61', 'AU', 'AUS'], // Australia\n\t['60', 'MY', 'MYS'], // Malaysia\n\t['58', 'VE', 'VEN'], // Venezuela\n\t['57', 'CO', 'COL'], // Colombia\n\t['56', 'CL', 'CHL'], // Chile\n\t['55', 'BR', 'BRA'], // Brazil\n\t['54', 'AR', 'ARG'], // Argentina\n\t['53', 'CU', 'CUB'], // Cuba\n\t['52', 'MX', 'MEX'], // Mexico\n\t['51', 'PE', 'PER'], // Peru\n\t['49', 'DE', 'DEU'], // Germany\n\t['48', 'PL', 'POL'], // Poland\n\t['47', 'SJ', 'SJM'], // Svalbard and Jan Mayen\n\t['47', 'NO', 'NOR'], // Norway\n\t['46', 'SE', 'SWE'], // Sweden\n\t['45', 'DK', 'DNK'], // Denmark\n\t['44', 'GB', 'GBR'], // United Kingdom\n\t['43', 'AT', 'AUT'], // Austria\n\t['41', 'CH', 'CHE'], // Switzerland\n\t['40', 'RO', 'ROU'], // Romania\n\t['39', 'IT', 'ITA'], // Italy\n\t['36', 'HU', 'HUN'], // Hungary\n\t['34', 'ES', 'ESP'], // Spain\n\t['33', 'FR', 'FRA'], // France\n\t['32', 'BE', 'BEL'], // Belgium\n\t['31', 'NL', 'NLD'], // Netherlands\n\t['30', 'GR', 'GRC'], // Greece\n\t['27', 'ZA', 'ZAF'], // South Africa\n\t['20', 'EG', 'EGY'], // Egypt\n\t['7', 'RU', 'RUS'], // Russia\n\t['7', 'KZ', 'KAZ'], // Kazakhstan\n\t['1', 'US', 'USA'], // United States\n\t['1', 'CA', 'CAN'] // Canada\n]\n\n// Derives an ISO 3166-1 country code\n// from a plaintext international phone number.\n//\n// E.g. '+79991234567' -> 'RU'\n//      '+19991234567' -> 'US'\n//     '+447700900431' -> 'UK'\n//\nexport default function country(phone)\n{\n\t// Sanity check\n\tif (!phone)\n\t{\n\t\treturn\n\t}\n\n\t// Must be an international plaintext phone number\n\tif (phone[0] !== '+')\n\t{\n\t\treturn\n\t}\n\n\t// Trim the '+' sign\n\tphone = phone.slice('+'.length)\n\n\t// Find the longest matching prefix\n\tfor (let country_code of country_codes)\n\t{\n\t\tif (starts_with(phone, country_code[0]))\n\t\t{\n\t\t\treturn country_code[1]\n\t\t}\n\t}\n}\n\n// Derives an ISO 3166-1 country code from locale.\n// Locale format: [language[_territory][.codeset][@modifier]]\n//\n// E.g. \"ru-RU\"       -> \"RU\"\n//      \"zh-Hans-HK\"  -> \"HK\"\n//      \"en\"          -> `undefined`\n//\nexport function country_from_locale(locale)\n{\n\t// Sanity check\n\tif (!locale)\n\t{\n\t\treturn\n\t}\n\n\tconst last_dash_index = locale.lastIndexOf('-')\n\tif (last_dash_index <= 0)\n\t{\n\t\treturn\n\t}\n\n\treturn locale.slice(last_dash_index + 1)\n}"]}