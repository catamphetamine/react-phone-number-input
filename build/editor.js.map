{"version":3,"sources":["../source/editor.js"],"names":["edit","value","caret_position","format","options","selection","backspace","delete","caret_position_for_digit","digit_index","digit_count","digits","_caret_position_for_digit","with_trunk_prefix","digits_in_phone_number","length","substring","previous_digit_index","end","phone","caret"],"mappings":"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","file":"editor.js","sourcesContent":["import\n{\n\tlocal_phone_digits as phone_digits,\n\tformat_local,\n\tdigit_index as phone_digit_index,\n\tindex_in_template,\n\tdigits_in_local_phone_number_template\n}\nfrom './phone'\n\n// Edits <input/>ted value according to the input conditions (caret position, key pressed)\n//\n// value          - '  999) 123 45 -67'\n// caret_position - 5 // starting from 0\n// format         - { country: ..., template: ... }\n//\n// options:\n// {\n// \tdelete: false,\n// \tbackspace: false,\n// \tselection: { end: 456 } // `end` specifies the index of the character after the selection\n// }\n//\n// Returns\n// {\n// \tphone: '(999) 123-45'\n// \tcaret: 12 // starting from 0\n// }\n//\nexport default function edit(value, caret_position, format, options = {})\n{\n\tif (options.selection && options.backspace)\n\t{\n\t\toptions.backspace = false\n\t\toptions.delete = true\n\t}\n\n\t// `options.with_trunk_prefix`\n\tconst caret_position_for_digit = (digit_index, digit_count, digits) => _caret_position_for_digit(digit_index, digit_count, format, digits, options.with_trunk_prefix)\n\t\n\t// Phone number digits (may be altered later)\n\tlet digits = phone_digits(value, format, options.with_trunk_prefix)\n\n\t// How many are there digits in a valid local phone number\n\t// (including trunk prefix)\n\tconst digits_in_phone_number = digits_in_local_phone_number_template(format, value, options.with_trunk_prefix)\n\n\t// Trim excessive digits (just in case)\n\tif (digits.length > digits_in_phone_number)\n\t{\n\t\tdigits = digits.substring(0, digits_in_phone_number.length)\n\t}\n\n\t// Current digit index in the phone number\n\t// (not a character index, but a digit index)\n\tconst digit_index = phone_digit_index(value, caret_position)\n\n\t// Adjust caret position\n\tif (options.backspace)\n\t{\n\t\t// Find the previous (the one being erased) digit index\n\t\t// inside a valid phone number.\n\t\tconst previous_digit_index = digit_index - 1\n\n\t\t// If there's no previous digit,\n\t\t// then just position the caret before the first digit.\n\t\tif (previous_digit_index < 0)\n\t\t{\n\t\t\t// (if there is the first digit)\n\t\t\tcaret_position = caret_position_for_digit(0, digits.length, digits)\n\t\t}\n\t\t// Else, if there is previous digit,\n\t\t// then erase it and reposition the caret.\n\t\telse\n\t\t{\n\t\t\t// If the input is broken, then just position the caret\n\t\t\t// after the last valid digit.\n\t\t\tif (previous_digit_index >= digits_in_phone_number)\n\t\t\t{\n\t\t\t\t// Position the caret after the last digit in phone number\n\t\t\t\tcaret_position = caret_position_for_digit(digits.length - 1, digits.length, digits) + 1\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Remove the previous digit\n\t\t\t\tdigits = digits.substring(0, previous_digit_index) + digits.substring(digit_index)\n\n\t\t\t\t// Position the caret before the erased digit\n\t\t\t\tcaret_position = caret_position_for_digit(previous_digit_index, digits.length, digits)\n\t\t\t}\n\t\t}\n\t}\n\telse if (options.delete)\n\t{\n\t\t// If there was any selection, then simply erase it\n\t\tif (options.selection)\n\t\t{\n\t\t\tvalue = value.substring(0, caret_position) + value.substring(options.selection.end)\n\t\t\tdigits = phone_digits(value, format, options.with_trunk_prefix)\n\n\t\t\t// Leave the caret position at the same digit\n\t\t\tcaret_position = caret_position_for_digit(digit_index, digits.length, digits)\n\t\t}\n\t\t// No selection was made, just erase a single digit\n\t\telse\n\t\t{\n\t\t\t// If the input is broken, just adjust the caret position\n\t\t\tif (digit_index >= digits_in_phone_number)\n\t\t\t{\n\t\t\t\t// Position the caret after the last digit in phone number\n\t\t\t\tcaret_position = caret_position_for_digit(digits.length - 1, digits.length, digits) + 1\n\t\t\t}\n\t\t\t// Find the current digit, remove it and reposition the caret\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Remove current digit\n\t\t\t\tdigits = digits.substring(0, digit_index) + digits.substring(digit_index + 1)\n\n\t\t\t\t// Leave the caret position at the same digit\n\t\t\t\tcaret_position = caret_position_for_digit(digit_index, digits.length, digits)\n\t\t\t}\n\t\t}\n\t}\n\t// If a regular keyboard key was pressed\n\telse\n\t{\n\t\t// Position the caret before the next digit\n\t\tcaret_position = caret_position_for_digit(digit_index, digits.length, digits)\n\t}\n\n\treturn { phone: format_local(digits, format, options.with_trunk_prefix), caret: caret_position }\n}\n\n// Calculates caret position for digit index\n// (not character index) in a phone number of a given format\nfunction _caret_position_for_digit(digit_index, digit_count, format, digits, with_trunk_prefix)\n{\n\t// Special case\n\tif (digit_count === 0)\n\t{\n\t\treturn 0\n\t}\n\n\t// In case of overflow (e.g. on Paste)\n\tif (digit_index >= digit_count)\n\t{\n\t\t// Position the caret after the last digit\n\t\treturn index_in_template(digit_count - 1, format, digits, with_trunk_prefix) + 1\n\t}\n\n\treturn index_in_template(digit_index, format, digits, with_trunk_prefix)\n}"]}